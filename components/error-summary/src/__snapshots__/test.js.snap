// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`error summary matches the ErrorSummary snapshot: error summary 1`] = `
.c2 {
  color: #0b0c0c;
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 700;
  font-size: 24px;
  line-height: 1.0416666666666667;
  display: block;
  margin-top: 0;
  margin-bottom: 20px;
}

.c4 {
  font-family: "nta",Arial,sans-serif;
  margin: 0;
  font-size: 16px;
  line-height: 1.25;
}

.c4 > p {
  margin: 0;
}

.c4 > p > code {
  padding: 0.2em 0.4em;
  margin: 0;
  font-size: 85%;
  background-color: rgba(27,31,35,0.05);
  border-radius: 3px;
}

.c4 > pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #f6f8fa;
  border-radius: 3px;
}

.c4 > pre > code {
  display: inline;
  padding: 0;
  margin: 0;
  border: 0;
  overflow: visible;
  line-height: inherit;
  word-wrap: normal;
}

.c3 {
  margin-bottom: 15px;
}

.c8 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  margin-bottom: 5px;
}

.c6 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  color: #0b0c0c;
  margin-top: 0;
  margin-bottom: 15px;
  list-style-type: none;
  padding-left: 0;
}

.c6 .c5 {
  margin-top: 10px;
}

.c6 > .c7 {
  margin-bottom: 5px;
}

.c9 {
  color: #005ea5;
  padding: 3px;
  margin: -3px;
  outline-color: transparent;
  display: inline-block;
  -webkit-text-decoration: underline;
  text-decoration: underline;
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 700;
  margin-bottom: 5px;
  -webkit-text-decoration: underline;
  text-decoration: underline;
  -webkit-text-decoration-skip-ink: none;
  text-decoration-skip-ink: none;
  text-transform: none;
  cursor: pointer;
  font-size: 16px;
  line-height: 1.25;
  color: #b10e1e;
  padding-top: 4px;
  padding-bottom: 2px;
}

.c9:focus {
  background-color: #ffbf47;
  outline: 3px solid #ffbf47;
}

.c9:visited {
  color: #2e358b;
}

.c9:visited {
  color: #b10e1e;
}

.c1 {
  color: #0b0c0c;
  padding: 15px;
  border: 4px solid #b10e1e;
}

.c1:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

.c0 {
  margin-bottom: 20px;
}

.c11 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  box-sizing: border-box;
}

.c11:after {
  content: '';
  display: table;
  clear: both;
}

.c10 {
  margin-bottom: 0;
}

.c13 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: block;
  clear: none;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  color: #0b0c0c;
  padding-bottom: 2px;
}

.c12 {
  margin-bottom: 0;
}

.c14 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  display: block;
  margin-bottom: 15px;
  color: #6f777b;
}

.c16 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  box-sizing: border-box;
  width: 100%;
  height: 40px;
  margin-top: 0;
  padding: 5px;
  border: 2px solid #0b0c0c;
  border-radius: 0;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}

.c16:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

.c16::-webkit-outer-spin-button,
.c16::-webkit-inner-spin-button {
  margin: 0;
  -webkit-appearance: none;
}

.c16[type="number"] {
  -moz-appearance: textfield;
}

.c15 {
  margin-bottom: 0;
}

.c17 {
  box-sizing: border-box;
  font-family: "nta",Arial,sans-serif;
  font-weight: 400;
  text-transform: none;
  font-size: 16px;
  line-height: 1.25;
  width: 100%;
  padding: 5px 4px 4px;
  border: 2px solid #0b0c0c;
}

.c17:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

@media print {
  .c2 {
    color: #000;
  }
}

@media print {
  .c2 {
    font-size: 24px;
    line-height: 1.05;
  }
}

@media only screen and (min-width:641px) {
  .c2 {
    font-size: 36px;
    line-height: 1.1111111111111112;
  }
}

@media only screen and (min-width:641px) {
  .c2 {
    margin-bottom: 30px;
  }
}

@media only screen and (min-width:641px) {
  .c4 {
    font-size: 19px;
    line-height: 1.3;
  }
}

@media only screen and (min-width:641px) {
  .c3 {
    margin-bottom: 15px;
  }
}

@media print {
  .c8 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c8 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media print {
  .c6 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c6 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media print {
  .c6 {
    color: #000;
  }
}

@media only screen and (min-width:641px) {
  .c6 {
    margin-bottom: 20px;
  }
}

@media only screen and (min-width:641px) {
  .c9 {
    font-size: 19px;
    line-height: 1.3;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    padding: 20px;
    border: 5px solid #b10e1e;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 30px;
  }
}

@media only screen and (min-width:641px) {
  .c10 {
    margin-bottom: 0;
  }
}

@media only screen and (min-width:641px) {
  .c13 {
    font-size: 19px;
    line-height: 1.3;
  }
}

@media only screen and (min-width:641px) {
  .c12 {
    margin-bottom: 0;
  }
}

@media print {
  .c14 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c14 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media print {
  .c16 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c16 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media only screen and (min-width:641px) {
  .c15 {
    margin-bottom: 0;
  }
}

@media only screen and (min-width:641px) {
  .c17 {
    font-size: 19px;
    line-height: 1.3;
    width: 75%;
  }
}

<_default>
  <div>
    <Styled(ErrorSummary)
      description="Optional description of the errors and how to correct them"
      errors={
        Array [
          Object {
            "targetName": "national-insurance-number",
            "text": "National Insurance number error",
          },
          Object {
            "targetName": "description",
            "text": "Description of what you saw error",
          },
        ]
      }
      heading="Message to alert the user to a problem goes here"
      onHandleErrorClick={[Function]}
    >
      <StyledComponent
        description="Optional description of the errors and how to correct them"
        errors={
          Array [
            Object {
              "targetName": "national-insurance-number",
              "text": "National Insurance number error",
            },
            Object {
              "targetName": "description",
              "text": "Description of what you saw error",
            },
          ]
        }
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-VigVT",
              "isStatic": false,
              "lastClassName": "c0",
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Styled(ErrorSummary)",
            "foldedComponentIds": Array [],
            "propTypes": Object {
              "margin": [Function],
              "mb": [Function],
              "padding": [Function],
            },
            "render": [Function],
            "styledComponentId": "sc-VigVT",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          }
        }
        forwardedRef={null}
        heading="Message to alert the user to a problem goes here"
        onHandleErrorClick={[Function]}
      >
        <ErrorSummary
          className="c0"
          description="Optional description of the errors and how to correct them"
          errors={
            Array [
              Object {
                "targetName": "national-insurance-number",
                "text": "National Insurance number error",
              },
              Object {
                "targetName": "description",
                "text": "Description of what you saw error",
              },
            ]
          }
          heading="Message to alert the user to a problem goes here"
          onHandleErrorClick={[Function]}
        >
          <styled.div
            className="c0"
            tabIndex={-1}
          >
            <StyledComponent
              className="c0"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gqjmRU",
                    "isStatic": true,
                    "lastClassName": "c1",
                    "rules": Array [
                      "color: #0b0c0c; padding: 15px; border: 4px solid #b10e1e; &:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
} @media only screen and (min-width: 641px) {
  padding: 20px; border: 5px solid #b10e1e;
}",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gqjmRU",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              tabIndex={-1}
            >
              <div
                className="c0 c1"
                tabIndex={-1}
              >
                <Styled(Header)
                  level={2}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "cFlEyZ",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "Styled(Header)",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "margin": [Function],
                          "mb": [Function],
                          "padding": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                        Symbol(Symbol.hasInstance): [Function],
                      }
                    }
                    forwardedRef={null}
                    level={2}
                  >
                    <Header
                      className=""
                      level={2}
                    >
                      <Styled(Component)
                        className=""
                        level={2}
                      >
                        <StyledComponent
                          className=""
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bxivhb",
                                "isStatic": false,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "color: #0b0c0c; @media print {
  color: #000;
}",
                                  [Function],
                                  "display: block; margin-top: 0;",
                                  [Function],
                                ],
                              },
                              "displayName": "Styled(Component)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bxivhb",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          level={2}
                        >
                          <Component
                            className="c2"
                            level={2}
                          >
                            <h2
                              className="c2"
                            >
                              Message to alert the user to a problem goes here
                            </h2>
                          </Component>
                        </StyledComponent>
                      </Styled(Component)>
                    </Header>
                  </StyledComponent>
                </Styled(Header)>
                <Styled(Paragraph)
                  mb={3}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gzVnrw",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "Styled(Paragraph)",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "margin": [Function],
                          "mb": [Function],
                          "padding": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-gzVnrw",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                        Symbol(Symbol.hasInstance): [Function],
                      }
                    }
                    forwardedRef={null}
                    mb={3}
                  >
                    <Paragraph
                      className="c3"
                      linkRenderer={[Function]}
                      mb={3}
                      supportingText={false}
                    >
                      <Styled(ReactMarkdown)
                        allowedTypes={
                          Array [
                            "paragraph",
                            "emphasis",
                            "strong",
                            "link",
                            "inlineCode",
                            "code",
                          ]
                        }
                        className="c3"
                        escapeHtml={false}
                        linkRenderer={[Function]}
                        mb={3}
                        renderers={
                          Object {
                            "link": [Function],
                          }
                        }
                        skipHtml={true}
                        source="Optional description of the errors and how to correct them"
                        supportingText={false}
                      >
                        <StyledComponent
                          allowedTypes={
                            Array [
                              "paragraph",
                              "emphasis",
                              "strong",
                              "link",
                              "inlineCode",
                              "code",
                            ]
                          }
                          className="c3"
                          escapeHtml={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bZQynM",
                                "isStatic": false,
                                "lastClassName": "c4",
                                "rules": Array [
                                  "font-family: \\"nta\\", Arial, sans-serif; margin: 0; > p {
  margin: 0;
} > p > code {
  padding: 0.2em 0.4em; margin: 0; font-size: 85%; background-color: rgba(27,31,35,0.05); border-radius: 3px;
} > pre {
  padding: 16px; overflow: auto; font-size: 85%; line-height: 1.45; background-color: #f6f8fa; border-radius: 3px;
} > pre > code {
  display: inline; padding: 0; margin: 0; border: 0; overflow: visible; line-height: inherit; word-wrap: normal;
}",
                                  [Function],
                                ],
                              },
                              "displayName": "Styled(ReactMarkdown)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "renderers": Object {
                                "blockquote": "blockquote",
                                "break": "br",
                                "code": [Function],
                                "definition": [Function],
                                "delete": "del",
                                "emphasis": "em",
                                "heading": [Function],
                                "html": [Function],
                                "image": "img",
                                "imageReference": "img",
                                "inlineCode": [Function],
                                "link": "a",
                                "linkReference": "a",
                                "list": [Function],
                                "listItem": [Function],
                                "paragraph": "p",
                                "root": "div",
                                "strong": "strong",
                                "table": [Function],
                                "tableBody": [Function],
                                "tableCell": [Function],
                                "tableHead": [Function],
                                "tableRow": [Function],
                                "thematicBreak": "hr",
                                "virtualHtml": [Function],
                              },
                              "styledComponentId": "sc-bZQynM",
                              "target": [Function],
                              "toString": [Function],
                              "types": Array [
                                "root",
                                "break",
                                "paragraph",
                                "emphasis",
                                "strong",
                                "thematicBreak",
                                "blockquote",
                                "delete",
                                "link",
                                "image",
                                "linkReference",
                                "imageReference",
                                "table",
                                "tableHead",
                                "tableBody",
                                "tableRow",
                                "tableCell",
                                "list",
                                "listItem",
                                "definition",
                                "heading",
                                "inlineCode",
                                "code",
                                "html",
                                "virtualHtml",
                              ],
                              "uriTransformer": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          linkRenderer={[Function]}
                          mb={3}
                          renderers={
                            Object {
                              "link": [Function],
                            }
                          }
                          skipHtml={true}
                          source="Optional description of the errors and how to correct them"
                          supportingText={false}
                        >
                          <ReactMarkdown
                            allowedTypes={
                              Array [
                                "paragraph",
                                "emphasis",
                                "strong",
                                "link",
                                "inlineCode",
                                "code",
                              ]
                            }
                            astPlugins={Array []}
                            className="c3 c4"
                            escapeHtml={false}
                            linkRenderer={[Function]}
                            mb={3}
                            plugins={Array []}
                            rawSourcePos={false}
                            renderers={
                              Object {
                                "link": [Function],
                              }
                            }
                            skipHtml={true}
                            source="Optional description of the errors and how to correct them"
                            sourcePos={false}
                            supportingText={false}
                            transformLinkUri={[Function]}
                          >
                            <div
                              className="c3 c4"
                              key="root-1-1"
                            >
                              <p
                                key="paragraph-1-1"
                              >
                                Optional description of the errors and how to correct them
                              </p>
                            </div>
                          </ReactMarkdown>
                        </StyledComponent>
                      </Styled(ReactMarkdown)>
                    </Paragraph>
                  </StyledComponent>
                </Styled(Paragraph)>
                <UnorderedList
                  listStyleType="none"
                >
                  <styled.ol
                    as="ul"
                    listStyleType="none"
                  >
                    <StyledComponent
                      as="ul"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "c5",
                            "isStatic": false,
                            "lastClassName": "c6",
                            "rules": Array [
                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                              "color: #0b0c0c; @media print {
  color: #000;
}",
                              "margin-top: 0; & & {
  margin-top: 10px;
}",
                              [Function],
                              [Function],
                            ],
                          },
                          "defaultProps": Object {
                            "listStyleType": undefined,
                          },
                          "displayName": "styled.ol",
                          "foldedComponentIds": Array [],
                          "propTypes": undefined,
                          "render": [Function],
                          "styledComponentId": "c5",
                          "target": "ol",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      listStyleType="none"
                    >
                      <ul
                        className="c5 c6"
                      >
                        <styled.li
                          key="national-insurance-number"
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "c7",
                                  "isStatic": false,
                                  "lastClassName": "c8",
                                  "rules": Array [
                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                    "margin-bottom: 5px;",
                                    [Function],
                                  ],
                                },
                                "displayName": "styled.li",
                                "foldedComponentIds": Array [],
                                "propTypes": undefined,
                                "render": [Function],
                                "styledComponentId": "c7",
                                "target": "li",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <li
                              className="c7 c8"
                            >
                              <Styled(Styled(Anchor))
                                onClick={[Function]}
                                tabIndex={1}
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-gZMcBi",
                                        "isStatic": true,
                                        "lastClassName": "c9",
                                        "rules": Array [
                                          "color: #005ea5; padding: 3px; margin: -3px; outline-color: transparent; display: inline-block; text-decoration: underline; :focus {
  background-color: #ffbf47; outline: 3px solid #ffbf47;
} :visited {
  color: #2e358b;
}",
                                          "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; font-weight: 700; margin-bottom: 5px; text-decoration: underline; text-decoration-skip-ink: none; text-transform: none; cursor: pointer; font-size: 16px; line-height: 1.25; :visited {
  color: #b10e1e;
} @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #b10e1e; padding-top: 4px; padding-bottom: 2px;",
                                        ],
                                      },
                                      "displayName": "Styled(Styled(Anchor))",
                                      "foldedComponentIds": Array [
                                        "sc-iwsKbI",
                                      ],
                                      "render": [Function],
                                      "styledComponentId": "sc-gZMcBi",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                      Symbol(Symbol.hasInstance): [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  onClick={[Function]}
                                  tabIndex={1}
                                >
                                  <Anchor
                                    className="c9"
                                    onClick={[Function]}
                                    tabIndex={1}
                                  >
                                    <a
                                      className="c9"
                                      onClick={[Function]}
                                      tabIndex={1}
                                    >
                                      National Insurance number error
                                    </a>
                                  </Anchor>
                                </StyledComponent>
                              </Styled(Styled(Anchor))>
                            </li>
                          </StyledComponent>
                        </styled.li>
                        <styled.li
                          key="description"
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "c7",
                                  "isStatic": false,
                                  "lastClassName": "c8",
                                  "rules": Array [
                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                    "margin-bottom: 5px;",
                                    [Function],
                                  ],
                                },
                                "displayName": "styled.li",
                                "foldedComponentIds": Array [],
                                "propTypes": undefined,
                                "render": [Function],
                                "styledComponentId": "c7",
                                "target": "li",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <li
                              className="c7 c8"
                            >
                              <Styled(Styled(Anchor))
                                onClick={[Function]}
                                tabIndex={2}
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-gZMcBi",
                                        "isStatic": true,
                                        "lastClassName": "c9",
                                        "rules": Array [
                                          "color: #005ea5; padding: 3px; margin: -3px; outline-color: transparent; display: inline-block; text-decoration: underline; :focus {
  background-color: #ffbf47; outline: 3px solid #ffbf47;
} :visited {
  color: #2e358b;
}",
                                          "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; font-weight: 700; margin-bottom: 5px; text-decoration: underline; text-decoration-skip-ink: none; text-transform: none; cursor: pointer; font-size: 16px; line-height: 1.25; :visited {
  color: #b10e1e;
} @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #b10e1e; padding-top: 4px; padding-bottom: 2px;",
                                        ],
                                      },
                                      "displayName": "Styled(Styled(Anchor))",
                                      "foldedComponentIds": Array [
                                        "sc-iwsKbI",
                                      ],
                                      "render": [Function],
                                      "styledComponentId": "sc-gZMcBi",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                      Symbol(Symbol.hasInstance): [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  onClick={[Function]}
                                  tabIndex={2}
                                >
                                  <Anchor
                                    className="c9"
                                    onClick={[Function]}
                                    tabIndex={2}
                                  >
                                    <a
                                      className="c9"
                                      onClick={[Function]}
                                      tabIndex={2}
                                    >
                                      Description of what you saw error
                                    </a>
                                  </Anchor>
                                </StyledComponent>
                              </Styled(Styled(Anchor))>
                            </li>
                          </StyledComponent>
                        </styled.li>
                      </ul>
                    </StyledComponent>
                  </styled.ol>
                </UnorderedList>
              </div>
            </StyledComponent>
          </styled.div>
        </ErrorSummary>
      </StyledComponent>
    </Styled(ErrorSummary)>
    <InputField
      hint="It’s on your National Insurance card, benefit letter, payslip or P60. For example, ‘QQ 12 34 56 C’."
      input={Object {}}
      meta={Object {}}
      name="national-insurance-number"
    >
      <Styled(Label)
        name="national-insurance-number"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c10",
                "rules": Array [
                  [Function],
                ],
              },
              "displayName": "Styled(Label)",
              "foldedComponentIds": Array [],
              "propTypes": Object {
                "margin": [Function],
                "mb": [Function],
                "padding": [Function],
              },
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            }
          }
          forwardedRef={null}
          name="national-insurance-number"
        >
          <Label
            className="c10"
            name="national-insurance-number"
          >
            <styled.label
              className="c10"
              name="national-insurance-number"
            >
              <StyledComponent
                className="c10"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jTzLTM",
                      "isStatic": false,
                      "lastClassName": "c11",
                      "rules": Array [
                        "display: flex; flex-direction: column; box-sizing: border-box; :after {
  content: ''; display: table; clear: both;
}",
                        [Function],
                      ],
                    },
                    "displayName": "styled.label",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-jTzLTM",
                    "target": "label",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                name="national-insurance-number"
              >
                <label
                  className="c10 c11"
                  name="national-insurance-number"
                >
                  <Styled(LabelText)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-cSHVUG",
                            "isStatic": false,
                            "lastClassName": "c12",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Styled(LabelText)",
                          "foldedComponentIds": Array [],
                          "propTypes": Object {
                            "margin": [Function],
                            "mb": [Function],
                            "padding": [Function],
                          },
                          "render": [Function],
                          "styledComponentId": "sc-cSHVUG",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <LabelText
                        className="c12"
                      >
                        <styled.span
                          className="c12"
                        >
                          <StyledComponent
                            className="c12"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-jzJRlG",
                                  "isStatic": false,
                                  "lastClassName": "c13",
                                  "rules": Array [
                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; display: block; clear: none; font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #0b0c0c; padding-bottom: 2px;",
                                    [Function],
                                  ],
                                },
                                "displayName": "styled.span",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-jzJRlG",
                                "target": "span",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <span
                              className="c12 c13"
                            >
                              National Insurance number
                            </span>
                          </StyledComponent>
                        </styled.span>
                      </LabelText>
                    </StyledComponent>
                  </Styled(LabelText)>
                  <Styled(HintText)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-kGXeez",
                            "isStatic": false,
                            "lastClassName": "eIIwaK",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Styled(HintText)",
                          "foldedComponentIds": Array [],
                          "propTypes": Object {
                            "margin": [Function],
                            "mb": [Function],
                            "padding": [Function],
                          },
                          "render": [Function],
                          "styledComponentId": "sc-kGXeez",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <HintText
                        className=""
                      >
                        <styled.span
                          className=""
                        >
                          <StyledComponent
                            className=""
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-kgoBCf",
                                  "isStatic": true,
                                  "lastClassName": "c14",
                                  "rules": Array [
                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                    "display: block; margin-bottom: 15px; color: #6f777b;",
                                  ],
                                },
                                "displayName": "styled.span",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-kgoBCf",
                                "target": "span",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <span
                              className="c14"
                            >
                              It’s on your National Insurance card, benefit letter, payslip or P60. For example, ‘QQ 12 34 56 C’.
                            </span>
                          </StyledComponent>
                        </styled.span>
                      </HintText>
                    </StyledComponent>
                  </Styled(HintText)>
                  <Styled(Input)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-dxgOiQ",
                            "isStatic": false,
                            "lastClassName": "c15",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Styled(Input)",
                          "foldedComponentIds": Array [],
                          "propTypes": Object {
                            "margin": [Function],
                            "mb": [Function],
                            "padding": [Function],
                          },
                          "render": [Function],
                          "styledComponentId": "sc-dxgOiQ",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <Input
                        className="c15"
                        type="text"
                      >
                        <styled.input
                          className="c15"
                          type="text"
                        >
                          <StyledComponent
                            className="c15"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-kpOJdX",
                                  "isStatic": false,
                                  "lastClassName": "c16",
                                  "rules": Array [
                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                    "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                                    "box-sizing: border-box; width: 100%; height: 40px; margin-top: 0; padding: 5px; border: 2px solid #0b0c0c; border-radius: 0; appearance: none; &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {
  margin: 0; -webkit-appearance: none;
} &[type=\\"number\\"] {
  -moz-appearance: textfield;
}",
                                    [Function],
                                  ],
                                },
                                "displayName": "styled.input",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-kpOJdX",
                                "target": "input",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            type="text"
                          >
                            <input
                              className="c15 c16"
                              type="text"
                            />
                          </StyledComponent>
                        </styled.input>
                      </Input>
                    </StyledComponent>
                  </Styled(Input)>
                </label>
              </StyledComponent>
            </styled.label>
          </Label>
        </StyledComponent>
      </Styled(Label)>
    </InputField>
    <br />
    <TextArea
      input={Object {}}
      meta={Object {}}
      name="description"
    >
      <Styled(Label)
        name="description"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c10",
                "rules": Array [
                  [Function],
                ],
              },
              "displayName": "Styled(Label)",
              "foldedComponentIds": Array [],
              "propTypes": Object {
                "margin": [Function],
                "mb": [Function],
                "padding": [Function],
              },
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            }
          }
          forwardedRef={null}
          name="description"
        >
          <Label
            className="c10"
            name="description"
          >
            <styled.label
              className="c10"
              name="description"
            >
              <StyledComponent
                className="c10"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jTzLTM",
                      "isStatic": false,
                      "lastClassName": "c11",
                      "rules": Array [
                        "display: flex; flex-direction: column; box-sizing: border-box; :after {
  content: ''; display: table; clear: both;
}",
                        [Function],
                      ],
                    },
                    "displayName": "styled.label",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-jTzLTM",
                    "target": "label",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                name="description"
              >
                <label
                  className="c10 c11"
                  name="description"
                >
                  <Styled(LabelText)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-cSHVUG",
                            "isStatic": false,
                            "lastClassName": "c12",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Styled(LabelText)",
                          "foldedComponentIds": Array [],
                          "propTypes": Object {
                            "margin": [Function],
                            "mb": [Function],
                            "padding": [Function],
                          },
                          "render": [Function],
                          "styledComponentId": "sc-cSHVUG",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <LabelText
                        className="c12"
                      >
                        <styled.span
                          className="c12"
                        >
                          <StyledComponent
                            className="c12"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-jzJRlG",
                                  "isStatic": false,
                                  "lastClassName": "c13",
                                  "rules": Array [
                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; display: block; clear: none; font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #0b0c0c; padding-bottom: 2px;",
                                    [Function],
                                  ],
                                },
                                "displayName": "styled.span",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-jzJRlG",
                                "target": "span",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <span
                              className="c12 c13"
                            >
                              Description of what you saw
                            </span>
                          </StyledComponent>
                        </styled.span>
                      </LabelText>
                    </StyledComponent>
                  </Styled(LabelText)>
                  <styled.textarea
                    rows="5"
                    type="text"
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-ckVGcZ",
                            "isStatic": false,
                            "lastClassName": "c17",
                            "rules": Array [
                              "box-sizing: border-box; font-family: \\"nta\\", Arial, sans-serif; font-weight: 400; text-transform: none; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3; width: 75%;
} width: 100%; padding: 5px 4px 4px; border: 2px solid #0b0c0c; :focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                              [Function],
                            ],
                          },
                          "displayName": "styled.textarea",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-ckVGcZ",
                          "target": "textarea",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      rows="5"
                      type="text"
                    >
                      <textarea
                        className="c17"
                        rows="5"
                        type="text"
                      />
                    </StyledComponent>
                  </styled.textarea>
                </label>
              </StyledComponent>
            </styled.label>
          </Label>
        </StyledComponent>
      </Styled(Label)>
    </TextArea>
  </div>
</_default>
`;
