// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`error summary matches the ErrorSummary snapshot: error summary 1`] = `
.emotion-22 {
  margin-bottom: 20px;
}

@media only screen and (min-width:641px) {
  .emotion-22 {
    margin-bottom: 30px;
  }
}

.emotion-21 {
  color: #0b0c0c;
  padding: 15px;
  border: 4px solid #b10e1e;
  margin-bottom: 20px;
}

.emotion-21:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0px;
}

@media only screen and (min-width:641px) {
  .emotion-21 {
    padding: 20px;
    border: 5px solid #b10e1e;
  }
}

@media only screen and (min-width:641px) {
  .emotion-21 {
    margin-bottom: 30px;
  }
}

.emotion-0 {
  font-family: "nta",Arial,sans-serif;
  font-weight: bold;
  margin: 0;
  font-size: 24px;
  line-height: 1.0416666666666667;
  margin-bottom: 15px;
}

@media only screen and (min-width:641px) {
  .emotion-0 {
    font-size: 36px;
    line-height: 1.1111111111111112;
    margin-bottom: 20px;
  }
}

@media print {
  .emotion-0 {
    font-size: 18px;
  }
}

.emotion-6 {
  margin-bottom: 10px;
}

@media only screen and (min-width:641px) {
  .emotion-6 {
    margin-bottom: 10px;
  }
}

.emotion-4 {
  font-family: "nta",Arial,sans-serif;
  margin: 0;
  font-size: 16px;
  line-height: 1.25;
  margin-bottom: 10px;
}

.emotion-4 > p {
  margin: 0;
}

@media only screen and (min-width:641px) {
  .emotion-4 {
    font-size: 19px;
    line-height: 1.3;
  }
}

@media only screen and (min-width:641px) {
  .emotion-4 {
    margin-bottom: 10px;
  }
}

.emotion-11 {
  margin-bottom: 0;
}

@media only screen and (min-width:641px) {
  .emotion-11 {
    margin-bottom: 0;
  }
}

.emotion-18 {
  margin: 0;
  padding: 0;
  padding-left: 20px;
  font-family: "nta",Arial,sans-serif;
  font-weight: 400;
  text-transform: none;
  font-size: 14px;
  line-height: 1.1428571429;
  list-style-type: none;
  margin-left: 0;
  padding-left: 0;
  margin-bottom: 0;
}

@media only screen and (min-width:641px) {
  .emotion-18 {
    font-size: 16px;
    line-height: 1.25;
  }
}

@media only screen and (min-width:641px) {
  .emotion-18 {
    margin-bottom: 0;
  }
}

.emotion-10 {
  font-family: "nta",Arial,sans-serif;
  font-weight: 400;
  text-transform: none;
  font-size: 14px;
  line-height: 1.1428571429;
  width: 100%;
  margin-bottom: 0;
}

@media only screen and (min-width:641px) {
  .emotion-10 {
    font-size: 16px;
    line-height: 1.25;
    margin-bottom: 5px;
  }
}

@media only screen and (min-width:641px) {
  .emotion-10 {
    margin-bottom: 0;
  }
}

.emotion-8 {
  color: #005ea5;
  padding: 3px;
  margin: -3px;
  outline-color: transparent;
  display: inline-block;
  -webkit-text-decoration: underline;
  text-decoration: underline;
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 700;
  margin-bottom: 5px;
  -webkit-text-decoration: underline;
  text-decoration: underline;
  -webkit-text-decoration-skip-ink: none;
  text-decoration-skip-ink: none;
  text-transform: none;
  cursor: pointer;
  font-size: 16px;
  line-height: 1.25;
  color: #b10e1e;
  padding-top: 4px;
  padding-bottom: 2px;
}

.emotion-8:focus {
  background-color: #ffbf47;
  outline: 3px solid #ffbf47;
}

.emotion-8:visited {
  color: #2e358b;
}

.emotion-8:visited {
  color: #b10e1e;
}

@media only screen and (min-width:641px) {
  .emotion-8 {
    font-size: 19px;
    line-height: 1.3;
  }
}

.emotion-24 {
  margin-bottom: 150px;
}

<ErrorSummaryExample>
  <div>
    <Styled(ErrorSummary)
      description="Optional description of the errors and how to correct them"
      errors={
        Array [
          Object {
            "handleScrollToElement": [Function],
            "id": 0,
            "text": "Descriptive link to the target question with an error",
          },
          Object {
            "handleScrollToElement": [Function],
            "id": 1,
            "text": "Descriptive link to the other target question with an error",
          },
        ]
      }
      heading="Message to alert the user to a problem goes here"
    >
      <ErrorSummary
        className="emotion-22"
        description="Optional description of the errors and how to correct them"
        errors={
          Array [
            Object {
              "handleScrollToElement": [Function],
              "id": 0,
              "text": "Descriptive link to the target question with an error",
            },
            Object {
              "handleScrollToElement": [Function],
              "id": 1,
              "text": "Descriptive link to the other target question with an error",
            },
          ]
        }
        heading="Message to alert the user to a problem goes here"
      >
        <Styled(div)
          className="emotion-22"
          tabIndex={-1}
        >
          <div
            className="emotion-21"
            tabIndex={-1}
          >
            <Styled(Header)
              level={2}
            >
              <Header
                className="emotion-2"
                level={2}
              >
                <Styled(Component)
                  className="emotion-2"
                  level={2}
                >
                  <Component
                    className="emotion-0"
                    level={2}
                  >
                    <h2
                      className="emotion-0"
                    >
                      Message to alert the user to a problem goes here
                    </h2>
                  </Component>
                </Styled(Component)>
              </Header>
            </Styled(Header)>
            <Styled(Paragraph)
              mb={2}
            >
              <Paragraph
                className="emotion-6"
                mb={2}
                supportingText={false}
              >
                <Styled(ReactMarkdown)
                  allowedTypes={
                    Array [
                      "paragraph",
                      "emphasis",
                      "strong",
                      "link",
                    ]
                  }
                  className="emotion-6"
                  escapeHtml={false}
                  mb={2}
                  renderers={
                    Object {
                      "link": [Function],
                    }
                  }
                  skipHtml={true}
                  source="Optional description of the errors and how to correct them"
                  supportingText={false}
                >
                  <ReactMarkdown
                    allowedTypes={
                      Array [
                        "paragraph",
                        "emphasis",
                        "strong",
                        "link",
                      ]
                    }
                    astPlugins={Array []}
                    className="emotion-4"
                    escapeHtml={false}
                    mb={2}
                    plugins={Array []}
                    rawSourcePos={false}
                    renderers={
                      Object {
                        "link": [Function],
                      }
                    }
                    skipHtml={true}
                    source="Optional description of the errors and how to correct them"
                    sourcePos={false}
                    supportingText={false}
                    transformLinkUri={[Function]}
                  >
                    <div
                      className="emotion-4"
                      key="root-1-1"
                    >
                      <p
                        key="paragraph-1-1"
                      >
                        Optional description of the errors and how to correct them
                      </p>
                    </div>
                  </ReactMarkdown>
                </Styled(ReactMarkdown)>
              </Paragraph>
            </Styled(Paragraph)>
            <Styled(UnorderedList)
              listStyleType="none"
            >
              <UnorderedList
                className="emotion-11"
                listStyleType="none"
              >
                <Styled(ul)
                  className="emotion-11"
                  listStyleType="none"
                >
                  <ul
                    className="emotion-18"
                  >
                    <Styled(ListItem)
                      key="0"
                    >
                      <ListItem
                        className="emotion-11"
                      >
                        <Styled(li)
                          className="emotion-11"
                        >
                          <li
                            className="emotion-10"
                          >
                            <Styled(Anchor)
                              onClick={[Function]}
                            >
                              <Anchor
                                className="emotion-8"
                                onClick={[Function]}
                              >
                                <a
                                  className="emotion-8"
                                  onClick={[Function]}
                                >
                                  Descriptive link to the target question with an error
                                </a>
                              </Anchor>
                            </Styled(Anchor)>
                          </li>
                        </Styled(li)>
                      </ListItem>
                    </Styled(ListItem)>
                    <Styled(ListItem)
                      key="1"
                    >
                      <ListItem
                        className="emotion-11"
                      >
                        <Styled(li)
                          className="emotion-11"
                        >
                          <li
                            className="emotion-10"
                          >
                            <Styled(Anchor)
                              onClick={[Function]}
                            >
                              <Anchor
                                className="emotion-8"
                                onClick={[Function]}
                              >
                                <a
                                  className="emotion-8"
                                  onClick={[Function]}
                                >
                                  Descriptive link to the other target question with an error
                                </a>
                              </Anchor>
                            </Styled(Anchor)>
                          </li>
                        </Styled(li)>
                      </ListItem>
                    </Styled(ListItem)>
                  </ul>
                </Styled(ul)>
              </UnorderedList>
            </Styled(UnorderedList)>
          </div>
        </Styled(div)>
      </ErrorSummary>
    </Styled(ErrorSummary)>
    <Styled(div)
      innerRef={[Function]}
    >
      <div
        className="emotion-24"
      >
        Target Question
      </div>
    </Styled(div)>
    <Styled(div)
      innerRef={[Function]}
    >
      <div
        className="emotion-24"
      >
        Other Target Question
      </div>
    </Styled(div)>
  </div>
</ErrorSummaryExample>
`;
