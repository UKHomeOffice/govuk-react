// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`hidden text matches the HiddenText snapshot: hidden text 1`] = `
.c5 {
  font-family: "nta",Arial,sans-serif;
  margin: 0;
  font-size: 16px;
  line-height: 1.25;
}

.c5 > p {
  margin: 0;
}

.c5 > p > code {
  padding: 0.2em 0.4em;
  margin: 0;
  font-size: 85%;
  background-color: rgba(27,31,35,0.05);
  border-radius: 3px;
}

.c5 > pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #f6f8fa;
  border-radius: 3px;
}

.c5 > pre > code {
  display: inline;
  padding: 0;
  margin: 0;
  border: 0;
  overflow: visible;
  line-height: inherit;
  word-wrap: normal;
}

.c4 {
  margin-bottom: 15px;
}

.c6 {
  margin-bottom: 0;
}

.c3 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  color: #0b0c0c;
  padding: 15px;
  margin-top: 20px;
  margin-bottom: 20px;
  margin-bottom: 0;
  clear: both;
  border-left: 10px solid #bfc1c3;
}

.c3:first-child {
  margin-top: 0;
}

.c3:only-child,
.c3:last-child {
  margin-bottom: 0;
}

.c2 {
  -webkit-text-decoration: underline;
  text-decoration: underline;
  -webkit-text-decoration-skip-ink: none;
  text-decoration-skip-ink: none;
}

.c1 {
  cursor: pointer;
  color: #005ea5;
  font-family: "nta",Arial,sans-serif;
  font-size: 19px;
  position: relative;
  margin-bottom: 5px;
}

.c1:hover {
  color: #2b8cc4;
}

.c1:focus {
  outline: 4px solid #ffbf47;
  background: #ffbf47;
}

.c0 {
  margin-bottom: 20px;
}

@media only screen and (min-width:641px) {
  .c5 {
    font-size: 19px;
    line-height: 1.3;
  }
}

@media only screen and (min-width:641px) {
  .c4 {
    margin-bottom: 20px;
  }
}

@media only screen and (min-width:641px) {
  .c6 {
    margin-bottom: 0;
  }
}

@media print {
  .c3 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c3 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media print {
  .c3 {
    color: #000;
  }
}

@media only screen and (min-width:641px) {
  .c3 {
    margin-top: 30px;
    margin-bottom: 30px;
  }
}

@media only screen and (min-width:641px) {
  .c3 {
    margin-bottom: 0;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 30px;
  }
}

<_default>
  <Styled(HiddenText)
    summaryText="Help with nationality"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
            ],
          },
          "displayName": "Styled(HiddenText)",
          "foldedComponentIds": Array [],
          "propTypes": Object {
            "margin": [Function],
            "mb": [Function],
            "padding": [Function],
          },
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      summaryText="Help with nationality"
    >
      <HiddenText
        className="c0"
        summaryText="Help with nationality"
      >
        <details
          className="c0"
        >
          <styled.summary>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": true,
                    "lastClassName": "c1",
                    "rules": Array [
                      "cursor: pointer; color: #005ea5; font-family: \\"nta\\", Arial, sans-serif; font-size: 19px; position: relative; margin-bottom: 5px; :hover {
  color: #2b8cc4;
} :focus {
  outline: 4px solid #ffbf47; background: #ffbf47;
}",
                    ],
                  },
                  "displayName": "styled.summary",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "summary",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <summary
                className="c1"
              >
                <styled.span>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gzVnrw",
                          "isStatic": true,
                          "lastClassName": "c2",
                          "rules": Array [
                            "text-decoration: underline; text-decoration-skip-ink: none;",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gzVnrw",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <span
                      className="c2"
                    >
                      Help with nationality
                    </span>
                  </StyledComponent>
                </styled.span>
              </summary>
            </StyledComponent>
          </styled.summary>
          <styled.div
            isNarrow={true}
            mb={0}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bZQynM",
                    "isStatic": false,
                    "lastClassName": "c3",
                    "rules": Array [
                      "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                      "color: #0b0c0c; @media print {
  color: #000;
}",
                      "padding: 15px;",
                      [Function],
                      "clear: both; border-left: 10px solid #bfc1c3; :first-child {
  margin-top: 0;
} :only-child,:last-child {
  margin-bottom: 0;
}",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "propTypes": undefined,
                  "render": [Function],
                  "styledComponentId": "sc-bZQynM",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              isNarrow={true}
              mb={0}
            >
              <div
                className="c3"
              >
                <Styled(Paragraph)
                  key="paragraphText1"
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-EHOje",
                          "isStatic": false,
                          "lastClassName": "c6",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "Styled(Paragraph)",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "margin": [Function],
                          "mb": [Function],
                          "padding": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-EHOje",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                        Symbol(Symbol.hasInstance): [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <Paragraph
                      className="c4"
                      linkRenderer={[Function]}
                      supportingText={false}
                    >
                      <Styled(ReactMarkdown)
                        allowedTypes={
                          Array [
                            "paragraph",
                            "emphasis",
                            "strong",
                            "link",
                            "inlineCode",
                            "code",
                          ]
                        }
                        className="c4"
                        escapeHtml={false}
                        linkRenderer={[Function]}
                        renderers={
                          Object {
                            "link": [Function],
                          }
                        }
                        skipHtml={true}
                        source="If you’re not sure about your nationality, try to find out from an official document like a passport or national ID card."
                        supportingText={false}
                      >
                        <StyledComponent
                          allowedTypes={
                            Array [
                              "paragraph",
                              "emphasis",
                              "strong",
                              "link",
                              "inlineCode",
                              "code",
                            ]
                          }
                          className="c4"
                          escapeHtml={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-ifAKCX",
                                "isStatic": false,
                                "lastClassName": "c5",
                                "rules": Array [
                                  "font-family: \\"nta\\", Arial, sans-serif; margin: 0; > p {
  margin: 0;
} > p > code {
  padding: 0.2em 0.4em; margin: 0; font-size: 85%; background-color: rgba(27,31,35,0.05); border-radius: 3px;
} > pre {
  padding: 16px; overflow: auto; font-size: 85%; line-height: 1.45; background-color: #f6f8fa; border-radius: 3px;
} > pre > code {
  display: inline; padding: 0; margin: 0; border: 0; overflow: visible; line-height: inherit; word-wrap: normal;
}",
                                  [Function],
                                ],
                              },
                              "displayName": "Styled(ReactMarkdown)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "renderers": Object {
                                "blockquote": "blockquote",
                                "break": "br",
                                "code": [Function],
                                "definition": [Function],
                                "delete": "del",
                                "emphasis": "em",
                                "heading": [Function],
                                "html": [Function],
                                "image": "img",
                                "imageReference": "img",
                                "inlineCode": [Function],
                                "link": "a",
                                "linkReference": "a",
                                "list": [Function],
                                "listItem": [Function],
                                "paragraph": "p",
                                "root": "div",
                                "strong": "strong",
                                "table": [Function],
                                "tableBody": [Function],
                                "tableCell": [Function],
                                "tableHead": [Function],
                                "tableRow": [Function],
                                "thematicBreak": "hr",
                                "virtualHtml": [Function],
                              },
                              "styledComponentId": "sc-ifAKCX",
                              "target": [Function],
                              "toString": [Function],
                              "types": Array [
                                "root",
                                "break",
                                "paragraph",
                                "emphasis",
                                "strong",
                                "thematicBreak",
                                "blockquote",
                                "delete",
                                "link",
                                "image",
                                "linkReference",
                                "imageReference",
                                "table",
                                "tableHead",
                                "tableBody",
                                "tableRow",
                                "tableCell",
                                "list",
                                "listItem",
                                "definition",
                                "heading",
                                "inlineCode",
                                "code",
                                "html",
                                "virtualHtml",
                              ],
                              "uriTransformer": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          linkRenderer={[Function]}
                          renderers={
                            Object {
                              "link": [Function],
                            }
                          }
                          skipHtml={true}
                          source="If you’re not sure about your nationality, try to find out from an official document like a passport or national ID card."
                          supportingText={false}
                        >
                          <ReactMarkdown
                            allowedTypes={
                              Array [
                                "paragraph",
                                "emphasis",
                                "strong",
                                "link",
                                "inlineCode",
                                "code",
                              ]
                            }
                            astPlugins={Array []}
                            className="c4 c5"
                            escapeHtml={false}
                            linkRenderer={[Function]}
                            plugins={Array []}
                            rawSourcePos={false}
                            renderers={
                              Object {
                                "link": [Function],
                              }
                            }
                            skipHtml={true}
                            source="If you’re not sure about your nationality, try to find out from an official document like a passport or national ID card."
                            sourcePos={false}
                            supportingText={false}
                            transformLinkUri={[Function]}
                          >
                            <div
                              className="c4 c5"
                              key="root-1-1"
                            >
                              <p
                                key="paragraph-1-1"
                              >
                                If you’re not sure about your nationality, try to find out from an official document like a passport or national ID card.
                              </p>
                            </div>
                          </ReactMarkdown>
                        </StyledComponent>
                      </Styled(ReactMarkdown)>
                    </Paragraph>
                  </StyledComponent>
                </Styled(Paragraph)>
                <Styled(Paragraph)
                  key="paragraphText2"
                  mb={0}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-EHOje",
                          "isStatic": false,
                          "lastClassName": "c6",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "Styled(Paragraph)",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "margin": [Function],
                          "mb": [Function],
                          "padding": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-EHOje",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                        Symbol(Symbol.hasInstance): [Function],
                      }
                    }
                    forwardedRef={null}
                    mb={0}
                  >
                    <Paragraph
                      className="c6"
                      linkRenderer={[Function]}
                      mb={0}
                      supportingText={false}
                    >
                      <Styled(ReactMarkdown)
                        allowedTypes={
                          Array [
                            "paragraph",
                            "emphasis",
                            "strong",
                            "link",
                            "inlineCode",
                            "code",
                          ]
                        }
                        className="c6"
                        escapeHtml={false}
                        linkRenderer={[Function]}
                        mb={0}
                        renderers={
                          Object {
                            "link": [Function],
                          }
                        }
                        skipHtml={true}
                        source="We need to know your nationality so we can work out which elections you’re entitled to vote in. If you can’t provide your nationality, you’ll have to send copies of identity documents through the post."
                        supportingText={false}
                      >
                        <StyledComponent
                          allowedTypes={
                            Array [
                              "paragraph",
                              "emphasis",
                              "strong",
                              "link",
                              "inlineCode",
                              "code",
                            ]
                          }
                          className="c6"
                          escapeHtml={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-ifAKCX",
                                "isStatic": false,
                                "lastClassName": "c5",
                                "rules": Array [
                                  "font-family: \\"nta\\", Arial, sans-serif; margin: 0; > p {
  margin: 0;
} > p > code {
  padding: 0.2em 0.4em; margin: 0; font-size: 85%; background-color: rgba(27,31,35,0.05); border-radius: 3px;
} > pre {
  padding: 16px; overflow: auto; font-size: 85%; line-height: 1.45; background-color: #f6f8fa; border-radius: 3px;
} > pre > code {
  display: inline; padding: 0; margin: 0; border: 0; overflow: visible; line-height: inherit; word-wrap: normal;
}",
                                  [Function],
                                ],
                              },
                              "displayName": "Styled(ReactMarkdown)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "renderers": Object {
                                "blockquote": "blockquote",
                                "break": "br",
                                "code": [Function],
                                "definition": [Function],
                                "delete": "del",
                                "emphasis": "em",
                                "heading": [Function],
                                "html": [Function],
                                "image": "img",
                                "imageReference": "img",
                                "inlineCode": [Function],
                                "link": "a",
                                "linkReference": "a",
                                "list": [Function],
                                "listItem": [Function],
                                "paragraph": "p",
                                "root": "div",
                                "strong": "strong",
                                "table": [Function],
                                "tableBody": [Function],
                                "tableCell": [Function],
                                "tableHead": [Function],
                                "tableRow": [Function],
                                "thematicBreak": "hr",
                                "virtualHtml": [Function],
                              },
                              "styledComponentId": "sc-ifAKCX",
                              "target": [Function],
                              "toString": [Function],
                              "types": Array [
                                "root",
                                "break",
                                "paragraph",
                                "emphasis",
                                "strong",
                                "thematicBreak",
                                "blockquote",
                                "delete",
                                "link",
                                "image",
                                "linkReference",
                                "imageReference",
                                "table",
                                "tableHead",
                                "tableBody",
                                "tableRow",
                                "tableCell",
                                "list",
                                "listItem",
                                "definition",
                                "heading",
                                "inlineCode",
                                "code",
                                "html",
                                "virtualHtml",
                              ],
                              "uriTransformer": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          linkRenderer={[Function]}
                          mb={0}
                          renderers={
                            Object {
                              "link": [Function],
                            }
                          }
                          skipHtml={true}
                          source="We need to know your nationality so we can work out which elections you’re entitled to vote in. If you can’t provide your nationality, you’ll have to send copies of identity documents through the post."
                          supportingText={false}
                        >
                          <ReactMarkdown
                            allowedTypes={
                              Array [
                                "paragraph",
                                "emphasis",
                                "strong",
                                "link",
                                "inlineCode",
                                "code",
                              ]
                            }
                            astPlugins={Array []}
                            className="c6 c5"
                            escapeHtml={false}
                            linkRenderer={[Function]}
                            mb={0}
                            plugins={Array []}
                            rawSourcePos={false}
                            renderers={
                              Object {
                                "link": [Function],
                              }
                            }
                            skipHtml={true}
                            source="We need to know your nationality so we can work out which elections you’re entitled to vote in. If you can’t provide your nationality, you’ll have to send copies of identity documents through the post."
                            sourcePos={false}
                            supportingText={false}
                            transformLinkUri={[Function]}
                          >
                            <div
                              className="c6 c5"
                              key="root-1-1"
                            >
                              <p
                                key="paragraph-1-1"
                              >
                                We need to know your nationality so we can work out which elections you’re entitled to vote in. If you can’t provide your nationality, you’ll have to send copies of identity documents through the post.
                              </p>
                            </div>
                          </ReactMarkdown>
                        </StyledComponent>
                      </Styled(ReactMarkdown)>
                    </Paragraph>
                  </StyledComponent>
                </Styled(Paragraph)>
              </div>
            </StyledComponent>
          </styled.div>
        </details>
      </HiddenText>
    </StyledComponent>
  </Styled(HiddenText)>
</_default>
`;
