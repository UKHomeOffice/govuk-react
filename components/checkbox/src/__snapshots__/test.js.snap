// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Checkbox can render with hint text: hint text 1`] = `
.c5 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  display: block;
  margin-bottom: 15px;
  color: #6f777b;
}

.c1 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  display: block;
  position: relative;
  min-height: 40px;
  padding: 0 0 0 40px;
  clear: left;
}

.c2 {
  position: absolute;
  z-index: 1;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  opacity: 0;
  cursor: pointer;
}

.c2:checked + span:after {
  opacity: 1;
}

.c2:focus + span:before {
  outline: 3px solid transparent;
  outline-offset: 3px;
  box-shadow: 0 0 0 3px #ffbf47;
}

.c2 + span {
  opacity: 1;
  pointer-events: auto;
}

.c3 {
  display: inline-block;
  cursor: pointer;
  padding: 8px 15px 5px;
  -ms-touch-action: manipulation;
  touch-action: manipulation;
}

.c3::before {
  content: '';
  box-sizing: border-box;
  position: absolute;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  border: 2px solid black;
  background: transparent;
}

.c3::after {
  content: '';
  position: absolute;
  top: 11px;
  left: 9px;
  width: 18px;
  height: 7px;
  -webkit-transform: rotate(-45deg);
  -ms-transform: rotate(-45deg);
  transform: rotate(-45deg);
  border: solid;
  border-width: 0 0 5px 5px;
  border-top-color: transparent;
  background: transparent;
  opacity: 0;
}

.c4 {
  display: block;
  padding-left: 15px;
  padding-right: 15px;
}

.c0 {
  margin-bottom: 10px;
}

@media print {
  .c5 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c5 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media print {
  .c1 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 10px;
  }
}

<Styled(Checkbox)
  hint="Hint text"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-dnqmqq",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
          ],
        },
        "displayName": "Styled(Checkbox)",
        "foldedComponentIds": Array [],
        "propTypes": Object {
          "margin": [Function],
          "mb": [Function],
          "padding": [Function],
        },
        "render": [Function],
        "styledComponentId": "sc-dnqmqq",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      }
    }
    forwardedRef={null}
    hint="Hint text"
  >
    <Checkbox
      className="c0"
      hint="Hint text"
    >
      <styled.label
        className="c0"
      >
        <StyledComponent
          className="c0"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-EHOje",
                "isStatic": true,
                "lastClassName": "c1",
                "rules": Array [
                  "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                  "display: block; position: relative; min-height: 40px; padding: 0 0 0 40px; clear: left;",
                ],
              },
              "displayName": "styled.label",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-EHOje",
              "target": "label",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <label
            className="c0 c1"
          >
            <styled.input
              type="checkbox"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bZQynM",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        "position: absolute; z-index: 1; top: 0; left: 0; width: 40px; height: 40px; opacity: 0; :checked + span:after {
  opacity: 1;
} :focus + span:before {
  outline: 3px solid transparent; outline-offset: 3px; box-shadow: 0 0 0 3px #ffbf47;
}",
                        [Function],
                      ],
                    },
                    "displayName": "styled.input",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bZQynM",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                type="checkbox"
              >
                <input
                  className="c2"
                  type="checkbox"
                />
              </StyledComponent>
            </styled.input>
            <styled.span>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gzVnrw",
                      "isStatic": true,
                      "lastClassName": "c3",
                      "rules": Array [
                        "display: inline-block; cursor: pointer; padding: 8px 15px 5px; -ms-touch-action: manipulation; touch-action: manipulation; ::before {
  content: ''; box-sizing: border-box; position: absolute; top: 0; left: 0; width: 40px; height: 40px; border: 2px solid black; background: transparent;
} ::after {
  content: ''; position: absolute; top: 11px; left: 9px; width: 18px; height: 7px; transform: rotate(-45deg); border: solid; border-width: 0 0 5px 5px; border-top-color: transparent; background: transparent; opacity: 0;
}",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gzVnrw",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <span
                  className="c3"
                >
                  Example with hint text
                </span>
              </StyledComponent>
            </styled.span>
            <Styled(Styled(HintText))>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "c4",
                      "rules": Array [
                        [Function],
                        "display: block; padding-left: 15px; padding-right: 15px;",
                      ],
                    },
                    "displayName": "Styled(Styled(HintText))",
                    "foldedComponentIds": Array [
                      "sc-ifAKCX",
                    ],
                    "propTypes": Object {
                      "margin": [Function],
                      "mb": [Function],
                      "padding": [Function],
                    },
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
              >
                <HintText
                  className="c4"
                >
                  <styled.span
                    className="c4"
                  >
                    <StyledComponent
                      className="c4"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bxivhb",
                            "isStatic": true,
                            "lastClassName": "c5",
                            "rules": Array [
                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                              "display: block; margin-bottom: 15px; color: #6f777b;",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bxivhb",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <span
                        className="c4 c5"
                      >
                        Hint text
                      </span>
                    </StyledComponent>
                  </styled.span>
                </HintText>
              </StyledComponent>
            </Styled(Styled(HintText))>
          </label>
        </StyledComponent>
      </styled.label>
    </Checkbox>
  </StyledComponent>
</Styled(Checkbox)>
`;

exports[`Checkbox matches wrapper snapshot: wrapper mount 1`] = `
.c1 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  display: block;
  position: relative;
  min-height: 40px;
  padding: 0 0 0 40px;
  clear: left;
}

.c2 {
  position: absolute;
  z-index: 1;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  opacity: 0;
  cursor: pointer;
}

.c2:checked + span:after {
  opacity: 1;
}

.c2:focus + span:before {
  outline: 3px solid transparent;
  outline-offset: 3px;
  box-shadow: 0 0 0 3px #ffbf47;
}

.c2 + span {
  opacity: 1;
  pointer-events: auto;
}

.c3 {
  display: inline-block;
  cursor: pointer;
  padding: 8px 15px 5px;
  -ms-touch-action: manipulation;
  touch-action: manipulation;
}

.c3::before {
  content: '';
  box-sizing: border-box;
  position: absolute;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  border: 2px solid black;
  background: transparent;
}

.c3::after {
  content: '';
  position: absolute;
  top: 11px;
  left: 9px;
  width: 18px;
  height: 7px;
  -webkit-transform: rotate(-45deg);
  -ms-transform: rotate(-45deg);
  transform: rotate(-45deg);
  border: solid;
  border-width: 0 0 5px 5px;
  border-top-color: transparent;
  background: transparent;
  opacity: 0;
}

.c0 {
  margin-bottom: 10px;
}

@media print {
  .c1 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 10px;
  }
}

<Styled(Checkbox)>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-dnqmqq",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
          ],
        },
        "displayName": "Styled(Checkbox)",
        "foldedComponentIds": Array [],
        "propTypes": Object {
          "margin": [Function],
          "mb": [Function],
          "padding": [Function],
        },
        "render": [Function],
        "styledComponentId": "sc-dnqmqq",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      }
    }
    forwardedRef={null}
  >
    <Checkbox
      className="c0"
    >
      <styled.label
        className="c0"
      >
        <StyledComponent
          className="c0"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-EHOje",
                "isStatic": true,
                "lastClassName": "c1",
                "rules": Array [
                  "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                  "display: block; position: relative; min-height: 40px; padding: 0 0 0 40px; clear: left;",
                ],
              },
              "displayName": "styled.label",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-EHOje",
              "target": "label",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <label
            className="c0 c1"
          >
            <styled.input
              type="checkbox"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bZQynM",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        "position: absolute; z-index: 1; top: 0; left: 0; width: 40px; height: 40px; opacity: 0; :checked + span:after {
  opacity: 1;
} :focus + span:before {
  outline: 3px solid transparent; outline-offset: 3px; box-shadow: 0 0 0 3px #ffbf47;
}",
                        [Function],
                      ],
                    },
                    "displayName": "styled.input",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bZQynM",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                type="checkbox"
              >
                <input
                  className="c2"
                  type="checkbox"
                />
              </StyledComponent>
            </styled.input>
            <styled.span>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gzVnrw",
                      "isStatic": true,
                      "lastClassName": "c3",
                      "rules": Array [
                        "display: inline-block; cursor: pointer; padding: 8px 15px 5px; -ms-touch-action: manipulation; touch-action: manipulation; ::before {
  content: ''; box-sizing: border-box; position: absolute; top: 0; left: 0; width: 40px; height: 40px; border: 2px solid black; background: transparent;
} ::after {
  content: ''; position: absolute; top: 11px; left: 9px; width: 18px; height: 7px; transform: rotate(-45deg); border: solid; border-width: 0 0 5px 5px; border-top-color: transparent; background: transparent; opacity: 0;
}",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gzVnrw",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <span
                  className="c3"
                >
                  example
                </span>
              </StyledComponent>
            </styled.span>
          </label>
        </StyledComponent>
      </styled.label>
    </Checkbox>
  </StyledComponent>
</Styled(Checkbox)>
`;

exports[`Checkbox renders disabled checkbox: disabled 1`] = `
.c1 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  display: block;
  position: relative;
  min-height: 40px;
  padding: 0 0 0 40px;
  clear: left;
}

.c2 {
  position: absolute;
  z-index: 1;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  opacity: 0;
  cursor: default;
}

.c2:checked + span:after {
  opacity: 1;
}

.c2:focus + span:before {
  outline: 3px solid transparent;
  outline-offset: 3px;
  box-shadow: 0 0 0 3px #ffbf47;
}

.c2 + span {
  opacity: .5;
  pointer-events: none;
}

.c3 {
  display: inline-block;
  cursor: pointer;
  padding: 8px 15px 5px;
  -ms-touch-action: manipulation;
  touch-action: manipulation;
}

.c3::before {
  content: '';
  box-sizing: border-box;
  position: absolute;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  border: 2px solid black;
  background: transparent;
}

.c3::after {
  content: '';
  position: absolute;
  top: 11px;
  left: 9px;
  width: 18px;
  height: 7px;
  -webkit-transform: rotate(-45deg);
  -ms-transform: rotate(-45deg);
  transform: rotate(-45deg);
  border: solid;
  border-width: 0 0 5px 5px;
  border-top-color: transparent;
  background: transparent;
  opacity: 0;
}

.c0 {
  margin-bottom: 10px;
}

@media print {
  .c1 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 10px;
  }
}

<Styled(Checkbox)
  disabled={true}
>
  <StyledComponent
    disabled={true}
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-dnqmqq",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
          ],
        },
        "displayName": "Styled(Checkbox)",
        "foldedComponentIds": Array [],
        "propTypes": Object {
          "margin": [Function],
          "mb": [Function],
          "padding": [Function],
        },
        "render": [Function],
        "styledComponentId": "sc-dnqmqq",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      }
    }
    forwardedRef={null}
  >
    <Checkbox
      className="c0"
      disabled={true}
    >
      <styled.label
        className="c0"
      >
        <StyledComponent
          className="c0"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-EHOje",
                "isStatic": true,
                "lastClassName": "c1",
                "rules": Array [
                  "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                  "display: block; position: relative; min-height: 40px; padding: 0 0 0 40px; clear: left;",
                ],
              },
              "displayName": "styled.label",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-EHOje",
              "target": "label",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <label
            className="c0 c1"
          >
            <styled.input
              disabled={true}
              type="checkbox"
            >
              <StyledComponent
                disabled={true}
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bZQynM",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        "position: absolute; z-index: 1; top: 0; left: 0; width: 40px; height: 40px; opacity: 0; :checked + span:after {
  opacity: 1;
} :focus + span:before {
  outline: 3px solid transparent; outline-offset: 3px; box-shadow: 0 0 0 3px #ffbf47;
}",
                        [Function],
                      ],
                    },
                    "displayName": "styled.input",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bZQynM",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                type="checkbox"
              >
                <input
                  className="c2"
                  disabled={true}
                  type="checkbox"
                />
              </StyledComponent>
            </styled.input>
            <styled.span>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gzVnrw",
                      "isStatic": true,
                      "lastClassName": "c3",
                      "rules": Array [
                        "display: inline-block; cursor: pointer; padding: 8px 15px 5px; -ms-touch-action: manipulation; touch-action: manipulation; ::before {
  content: ''; box-sizing: border-box; position: absolute; top: 0; left: 0; width: 40px; height: 40px; border: 2px solid black; background: transparent;
} ::after {
  content: ''; position: absolute; top: 11px; left: 9px; width: 18px; height: 7px; transform: rotate(-45deg); border: solid; border-width: 0 0 5px 5px; border-top-color: transparent; background: transparent; opacity: 0;
}",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gzVnrw",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <span
                  className="c3"
                >
                  Example
                </span>
              </StyledComponent>
            </styled.span>
          </label>
        </StyledComponent>
      </styled.label>
    </Checkbox>
  </StyledComponent>
</Styled(Checkbox)>
`;
