// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`button basics matches snapshot 1`] = `
.c1 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 19px;
  box-sizing: border-box;
  display: inline-block;
  position: relative;
  width: 100%;
  margin-top: 0;
  padding: 7px 10px;
  border: 2px solid transparent;
  border-radius: 0;
  color: #ffffff;
  background-color: #00823b;
  box-shadow: 0 2px 0 #003618;
  text-align: center;
  vertical-align: top;
  cursor: pointer;
  -webkit-appearance: none;
}

.c1:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

.c1:link,
.c1:visited,
.c1:active,
.c1:hover {
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c1::-moz-focus-inner {
  padding: 0;
  border: 0;
}

.c1:hover,
.c1:focus {
  background-color: #00692f;
}

.c1:active {
  top: 2px;
  box-shadow: none;
}

.c1::before {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  right: -2px;
  bottom: -4px;
  left: -2px;
  background: transparent;
}

.c1:active::before {
  top: -4px;
}

.c1:disabled {
  opacity: 0.5;
  background: #00823b;
}

.c1:disabled:hover {
  background-color: #00823b;
  cursor: default;
}

.c1:disabled:focus {
  outline: none;
}

.c1:disabled:active {
  top: 0;
  box-shadow: 0 2px 0 #003618;
}

.c1 svg {
  max-width: 15px;
}

.c0 {
  margin-bottom: 20px;
}

@media print {
  .c1 {
    font-size: 14px;
    line-height: 19px;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    font-size: 19px;
    line-height: 19px;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    width: auto;
  }
}

@media only screen and (min-width:641px) {
  .c1 svg {
    margin-left: 10px;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 30px;
  }
}

<Styled(Button)>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-EHOje",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
          ],
        },
        "displayName": "Styled(Button)",
        "foldedComponentIds": Array [],
        "propTypes": Object {
          "margin": [Function],
          "mb": [Function],
          "padding": [Function],
        },
        "render": [Function],
        "styledComponentId": "sc-EHOje",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      }
    }
    forwardedRef={null}
  >
    <Button
      className="c0"
      disabled={false}
      start={false}
    >
      <styled.button
        className="c0"
        disabled={false}
        isStart={false}
      >
        <StyledComponent
          className="c0"
          disabled={false}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bxivhb",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  [Function],
                  "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                  [Function],
                  [Function],
                ],
              },
              "displayName": "styled.button",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bxivhb",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          isStart={false}
        >
          <button
            className="c0 c1"
            disabled={false}
          >
            Example
          </button>
        </StyledComponent>
      </styled.button>
    </Button>
  </StyledComponent>
</Styled(Button)>
`;

exports[`button blue button, with automatic colours matches snapshot 1`] = `
.c1 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 19px;
  box-sizing: border-box;
  display: inline-block;
  position: relative;
  width: 100%;
  margin-top: 0;
  padding: 7px 10px;
  border: 2px solid transparent;
  border-radius: 0;
  color: #ffffff;
  background-color: #005ea5;
  box-shadow: 0 2px 0 #003259;
  text-align: center;
  vertical-align: top;
  cursor: pointer;
  -webkit-appearance: none;
}

.c1:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

.c1:link,
.c1:visited,
.c1:active,
.c1:hover {
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c1::-moz-focus-inner {
  padding: 0;
  border: 0;
}

.c1:hover,
.c1:focus {
  background-color: #004f8c;
}

.c1:active {
  top: 2px;
  box-shadow: none;
}

.c1::before {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  right: -2px;
  bottom: -4px;
  left: -2px;
  background: transparent;
}

.c1:active::before {
  top: -4px;
}

.c1:disabled {
  opacity: 0.5;
  background: #005ea5;
}

.c1:disabled:hover {
  background-color: #005ea5;
  cursor: default;
}

.c1:disabled:focus {
  outline: none;
}

.c1:disabled:active {
  top: 0;
  box-shadow: 0 2px 0 #003259;
}

.c1 svg {
  max-width: 15px;
}

.c0 {
  margin-bottom: 20px;
}

@media print {
  .c1 {
    font-size: 14px;
    line-height: 19px;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    font-size: 19px;
    line-height: 19px;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    width: auto;
  }
}

@media only screen and (min-width:641px) {
  .c1 svg {
    margin-left: 10px;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 30px;
  }
}

<ButtonBlue>
  <Styled(Button)
    buttonColour="#005ea5"
  >
    <StyledComponent
      buttonColour="#005ea5"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
            ],
          },
          "displayName": "Styled(Button)",
          "foldedComponentIds": Array [],
          "propTypes": Object {
            "margin": [Function],
            "mb": [Function],
            "padding": [Function],
          },
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
    >
      <Button
        buttonColour="#005ea5"
        className="c0"
        disabled={false}
        start={false}
      >
        <styled.button
          buttonColour="#005ea5"
          className="c0"
          disabled={false}
          isStart={false}
        >
          <StyledComponent
            buttonColour="#005ea5"
            className="c0"
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    [Function],
                    "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "styled.button",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isStart={false}
          >
            <button
              className="c0 c1"
              disabled={false}
            >
              Blue button
            </button>
          </StyledComponent>
        </styled.button>
      </Button>
    </StyledComponent>
  </Styled(Button)>
</ButtonBlue>
`;

exports[`button button with icon matches snapshot 1`] = `
.c1 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 700;
  font-size: 18px;
  line-height: 1;
  box-sizing: border-box;
  display: inline-block;
  position: relative;
  width: 100%;
  margin-top: 0;
  padding: 8px 15px;
  border: 2px solid transparent;
  border-radius: 0;
  color: #ffffff;
  background-color: #00823b;
  box-shadow: 0 2px 0 #003618;
  text-align: center;
  vertical-align: top;
  cursor: pointer;
  -webkit-appearance: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c1:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

.c1:link,
.c1:visited,
.c1:active,
.c1:hover {
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c1::-moz-focus-inner {
  padding: 0;
  border: 0;
}

.c1:hover,
.c1:focus {
  background-color: #00692f;
}

.c1:active {
  top: 2px;
  box-shadow: none;
}

.c1::before {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  right: -2px;
  bottom: -4px;
  left: -2px;
  background: transparent;
}

.c1:active::before {
  top: -4px;
}

.c1:disabled {
  opacity: 0.5;
  background: #00823b;
}

.c1:disabled:hover {
  background-color: #00823b;
  cursor: default;
}

.c1:disabled:focus {
  outline: none;
}

.c1:disabled:active {
  top: 0;
  box-shadow: 0 2px 0 #003618;
}

.c1 svg {
  max-width: 15px;
}

.c2 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
}

.c0 {
  margin-bottom: 20px;
}

@media print {
  .c1 {
    font-size: 18px;
    line-height: 1;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    font-size: 24px;
    line-height: 1;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    width: auto;
  }
}

@media only screen and (min-width:641px) {
  .c1 svg {
    margin-left: 10px;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 30px;
  }
}

<ButtonStartIcon>
  <Styled(Button)
    icon={
      <ButtonArrow
        fill="currentColor"
        title="ButtonArrow"
      />
    }
    start={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
            ],
          },
          "displayName": "Styled(Button)",
          "foldedComponentIds": Array [],
          "propTypes": Object {
            "margin": [Function],
            "mb": [Function],
            "padding": [Function],
          },
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      icon={
        <ButtonArrow
          fill="currentColor"
          title="ButtonArrow"
        />
      }
      start={true}
    >
      <Button
        className="c0"
        disabled={false}
        icon={
          <ButtonArrow
            fill="currentColor"
            title="ButtonArrow"
          />
        }
        start={true}
      >
        <styled.button
          className="c0"
          disabled={false}
          icon={
            <ButtonArrow
              fill="currentColor"
              title="ButtonArrow"
            />
          }
          isStart={true}
        >
          <StyledComponent
            className="c0"
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    [Function],
                    "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "styled.button",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            icon={
              <ButtonArrow
                fill="currentColor"
                title="ButtonArrow"
              />
            }
            isStart={true}
          >
            <button
              className="c0 c1"
              disabled={false}
            >
              <styled.span>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": true,
                        "lastClassName": "c2",
                        "rules": Array [
                          "flex-grow: 1;",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <span
                    className="c2"
                  >
                    Start now
                  </span>
                </StyledComponent>
              </styled.span>
              <ButtonArrow
                fill="currentColor"
                title="ButtonArrow"
              >
                <SVG
                  fill="currentColor"
                  title="ButtonArrow"
                  viewBox="0 0 706 860"
                >
                  <svg
                    fill="currentColor"
                    height="100%"
                    style={
                      Object {
                        "display": "block",
                      }
                    }
                    version="1.1"
                    viewBox="0 0 706 860"
                    width="100%"
                  >
                    <title>
                      ButtonArrow
                    </title>
                    <g>
                      <path
                        d="M.152 0h252.993l452.108 430H452.261z"
                      />
                      <path
                        d="M0 860h252.993L705.1 430H452.108z"
                        fillOpacity="0.5"
                      />
                    </g>
                  </svg>
                </SVG>
              </ButtonArrow>
            </button>
          </StyledComponent>
        </styled.button>
      </Button>
    </StyledComponent>
  </Styled(Button)>
</ButtonStartIcon>
`;

exports[`button custom colours matches snapshot 1`] = `
.c1 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 19px;
  box-sizing: border-box;
  display: inline-block;
  position: relative;
  width: 100%;
  margin-top: 0;
  padding: 7px 10px;
  border: 2px solid transparent;
  border-radius: 0;
  color: #0b0c0c;
  background-color: #dee0e2;
  box-shadow: 0 2px 0 #f47738;
  text-align: center;
  vertical-align: top;
  cursor: pointer;
  -webkit-appearance: none;
}

.c1:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

.c1:link,
.c1:visited,
.c1:active,
.c1:hover {
  color: #0b0c0c;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c1::-moz-focus-inner {
  padding: 0;
  border: 0;
}

.c1:hover,
.c1:focus {
  background-color: #ffbf47;
}

.c1:active {
  top: 2px;
  box-shadow: none;
}

.c1::before {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  right: -2px;
  bottom: -4px;
  left: -2px;
  background: transparent;
}

.c1:active::before {
  top: -4px;
}

.c1:disabled {
  opacity: 0.5;
  background: #dee0e2;
}

.c1:disabled:hover {
  background-color: #dee0e2;
  cursor: default;
}

.c1:disabled:focus {
  outline: none;
}

.c1:disabled:active {
  top: 0;
  box-shadow: 0 2px 0 #f47738;
}

.c1 svg {
  max-width: 15px;
}

.c0 {
  margin-bottom: 20px;
}

@media print {
  .c1 {
    font-size: 14px;
    line-height: 19px;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    font-size: 19px;
    line-height: 19px;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    width: auto;
  }
}

@media only screen and (min-width:641px) {
  .c1 svg {
    margin-left: 10px;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 30px;
  }
}

<ButtonWacky>
  <Styled(Button)
    buttonColour="#dee0e2"
    buttonHoverColour="#ffbf47"
    buttonShadowColour="#f47738"
    buttonTextColour="#0b0c0c"
  >
    <StyledComponent
      buttonColour="#dee0e2"
      buttonHoverColour="#ffbf47"
      buttonShadowColour="#f47738"
      buttonTextColour="#0b0c0c"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
            ],
          },
          "displayName": "Styled(Button)",
          "foldedComponentIds": Array [],
          "propTypes": Object {
            "margin": [Function],
            "mb": [Function],
            "padding": [Function],
          },
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
    >
      <Button
        buttonColour="#dee0e2"
        buttonHoverColour="#ffbf47"
        buttonShadowColour="#f47738"
        buttonTextColour="#0b0c0c"
        className="c0"
        disabled={false}
        start={false}
      >
        <styled.button
          buttonColour="#dee0e2"
          buttonHoverColour="#ffbf47"
          buttonShadowColour="#f47738"
          buttonTextColour="#0b0c0c"
          className="c0"
          disabled={false}
          isStart={false}
        >
          <StyledComponent
            buttonColour="#dee0e2"
            buttonHoverColour="#ffbf47"
            buttonShadowColour="#f47738"
            buttonTextColour="#0b0c0c"
            className="c0"
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    [Function],
                    "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "styled.button",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isStart={false}
          >
            <button
              className="c0 c1"
              disabled={false}
            >
              Wacky colours
            </button>
          </StyledComponent>
        </styled.button>
      </Button>
    </StyledComponent>
  </Styled(Button)>
</ButtonWacky>
`;

exports[`button disabled matches snapshot 1`] = `
.c1 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 19px;
  box-sizing: border-box;
  display: inline-block;
  position: relative;
  width: 100%;
  margin-top: 0;
  padding: 7px 10px;
  border: 2px solid transparent;
  border-radius: 0;
  color: #ffffff;
  background-color: #00823b;
  box-shadow: 0 2px 0 #003618;
  text-align: center;
  vertical-align: top;
  cursor: pointer;
  -webkit-appearance: none;
}

.c1:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

.c1:link,
.c1:visited,
.c1:active,
.c1:hover {
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c1::-moz-focus-inner {
  padding: 0;
  border: 0;
}

.c1:hover,
.c1:focus {
  background-color: #00692f;
}

.c1:active {
  top: 2px;
  box-shadow: none;
}

.c1::before {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  right: -2px;
  bottom: -4px;
  left: -2px;
  background: transparent;
}

.c1:active::before {
  top: -4px;
}

.c1:disabled {
  opacity: 0.5;
  background: #00823b;
}

.c1:disabled:hover {
  background-color: #00823b;
  cursor: default;
}

.c1:disabled:focus {
  outline: none;
}

.c1:disabled:active {
  top: 0;
  box-shadow: 0 2px 0 #003618;
}

.c1 svg {
  max-width: 15px;
}

.c0 {
  margin-bottom: 20px;
}

@media print {
  .c1 {
    font-size: 14px;
    line-height: 19px;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    font-size: 19px;
    line-height: 19px;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    width: auto;
  }
}

@media only screen and (min-width:641px) {
  .c1 svg {
    margin-left: 10px;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 30px;
  }
}

<ButtonDisabled>
  <Styled(Button)
    disabled={true}
  >
    <StyledComponent
      disabled={true}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
            ],
          },
          "displayName": "Styled(Button)",
          "foldedComponentIds": Array [],
          "propTypes": Object {
            "margin": [Function],
            "mb": [Function],
            "padding": [Function],
          },
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
    >
      <Button
        className="c0"
        disabled={true}
        start={false}
      >
        <styled.button
          className="c0"
          disabled={true}
          isStart={false}
        >
          <StyledComponent
            className="c0"
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    [Function],
                    "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "styled.button",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isStart={false}
          >
            <button
              className="c0 c1"
              disabled={true}
            >
              Disabled primary button
            </button>
          </StyledComponent>
        </styled.button>
      </Button>
    </StyledComponent>
  </Styled(Button)>
</ButtonDisabled>
`;

exports[`button start button matches snapshot 1`] = `
.c1 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 700;
  font-size: 18px;
  line-height: 1;
  box-sizing: border-box;
  display: inline-block;
  position: relative;
  width: 100%;
  margin-top: 0;
  padding: 8px 15px;
  border: 2px solid transparent;
  border-radius: 0;
  color: #ffffff;
  background-color: #00823b;
  box-shadow: 0 2px 0 #003618;
  text-align: center;
  vertical-align: top;
  cursor: pointer;
  -webkit-appearance: none;
}

.c1:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

.c1:link,
.c1:visited,
.c1:active,
.c1:hover {
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c1::-moz-focus-inner {
  padding: 0;
  border: 0;
}

.c1:hover,
.c1:focus {
  background-color: #00692f;
}

.c1:active {
  top: 2px;
  box-shadow: none;
}

.c1::before {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  right: -2px;
  bottom: -4px;
  left: -2px;
  background: transparent;
}

.c1:active::before {
  top: -4px;
}

.c1:disabled {
  opacity: 0.5;
  background: #00823b;
}

.c1:disabled:hover {
  background-color: #00823b;
  cursor: default;
}

.c1:disabled:focus {
  outline: none;
}

.c1:disabled:active {
  top: 0;
  box-shadow: 0 2px 0 #003618;
}

.c1 svg {
  max-width: 15px;
}

.c0 {
  margin-bottom: 20px;
}

@media print {
  .c1 {
    font-size: 18px;
    line-height: 1;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    font-size: 24px;
    line-height: 1;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    width: auto;
  }
}

@media only screen and (min-width:641px) {
  .c1 svg {
    margin-left: 10px;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 30px;
  }
}

<ButtonStart>
  <Styled(Button)
    start={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
            ],
          },
          "displayName": "Styled(Button)",
          "foldedComponentIds": Array [],
          "propTypes": Object {
            "margin": [Function],
            "mb": [Function],
            "padding": [Function],
          },
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      start={true}
    >
      <Button
        className="c0"
        disabled={false}
        start={true}
      >
        <styled.button
          className="c0"
          disabled={false}
          isStart={true}
        >
          <StyledComponent
            className="c0"
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    [Function],
                    "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "styled.button",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isStart={true}
          >
            <button
              className="c0 c1"
              disabled={false}
            >
              Save and continue
            </button>
          </StyledComponent>
        </styled.button>
      </Button>
    </StyledComponent>
  </Styled(Button)>
</ButtonStart>
`;
