// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ListNavigation matches wrapper snapshot: wrapper mount 1`] = `
.c2 {
  margin: 0;
  padding: 0;
  padding-left: 20px;
  font-family: "nta",Arial,sans-serif;
  font-weight: 400;
  text-transform: none;
  font-size: 14px;
  line-height: 1.1428571429;
  list-style-type: square;
}

.c1 {
  margin-bottom: 0;
}

.c4 {
  font-family: "nta",Arial,sans-serif;
  font-weight: 400;
  text-transform: none;
  font-size: 14px;
  line-height: 1.1428571429;
  width: 100%;
}

.c3 {
  margin-bottom: 0;
}

.c0 {
  margin-bottom: 0;
}

@media only screen and (min-width:641px) {
  .c2 {
    font-size: 16px;
    line-height: 1.25;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    margin-bottom: 0;
  }
}

@media only screen and (min-width:641px) {
  .c4 {
    font-size: 16px;
    line-height: 1.25;
    margin-bottom: 5px;
  }
}

@media only screen and (min-width:641px) {
  .c3 {
    margin-bottom: 0;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 0;
  }
}

<Styled(ListNavigation)
  listStyleType="square"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-gzVnrw",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
          ],
        },
        "displayName": "Styled(ListNavigation)",
        "foldedComponentIds": Array [],
        "propTypes": Object {
          "margin": [Function],
          "mb": [Function],
          "padding": [Function],
        },
        "render": [Function],
        "styledComponentId": "sc-gzVnrw",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      }
    }
    forwardedRef={null}
    listStyleType="square"
  >
    <ListNavigation
      className="c0"
      listStyleType="square"
    >
      <Styled(UnorderedList)
        className="c0"
        listStyleType="square"
      >
        <StyledComponent
          className="c0"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-ifAKCX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  [Function],
                ],
              },
              "displayName": "Styled(UnorderedList)",
              "foldedComponentIds": Array [],
              "propTypes": Object {
                "margin": [Function],
                "mb": [Function],
                "padding": [Function],
              },
              "render": [Function],
              "styledComponentId": "sc-ifAKCX",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            }
          }
          forwardedRef={null}
          listStyleType="square"
        >
          <UnorderedList
            className="c0 c1"
            listStyleType="square"
          >
            <styled.ul
              className="c0 c1"
              listStyleType="square"
            >
              <StyledComponent
                className="c0 c1"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bxivhb",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        "margin: 0; padding: 0; padding-left: 20px; font-family: \\"nta\\", Arial, sans-serif; font-weight: 400; text-transform: none; font-size: 14px; line-height: 1.1428571429; @media only screen and (min-width: 641px) {
  font-size: 16px; line-height: 1.25;
}",
                        [Function],
                      ],
                    },
                    "displayName": "styled.ul",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bxivhb",
                    "target": "ul",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                listStyleType="square"
              >
                <ul
                  className="c0 c1 c2"
                >
                  <Styled(ListItem)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bZQynM",
                            "isStatic": false,
                            "lastClassName": "c3",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Styled(ListItem)",
                          "foldedComponentIds": Array [],
                          "propTypes": Object {
                            "margin": [Function],
                            "mb": [Function],
                            "padding": [Function],
                          },
                          "render": [Function],
                          "styledComponentId": "sc-bZQynM",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <ListItem
                        className="c3"
                      >
                        <styled.li
                          className="c3"
                        >
                          <StyledComponent
                            className="c3"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-EHOje",
                                  "isStatic": true,
                                  "lastClassName": "c4",
                                  "rules": Array [
                                    "font-family: \\"nta\\", Arial, sans-serif; font-weight: 400; text-transform: none; font-size: 14px; line-height: 1.1428571429; width: 100%; @media only screen and (min-width: 641px) {
  font-size: 16px; line-height: 1.25; margin-bottom: 5px;
}",
                                  ],
                                },
                                "displayName": "styled.li",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-EHOje",
                                "target": "li",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <li
                              className="c3 c4"
                            >
                              Example
                            </li>
                          </StyledComponent>
                        </styled.li>
                      </ListItem>
                    </StyledComponent>
                  </Styled(ListItem)>
                </ul>
              </StyledComponent>
            </styled.ul>
          </UnorderedList>
        </StyledComponent>
      </Styled(UnorderedList)>
    </ListNavigation>
  </StyledComponent>
</Styled(ListNavigation)>
`;
