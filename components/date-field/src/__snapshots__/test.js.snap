// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DateField matches wrappersnapshot: wrapper mount 1`] = `
.c3 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: block;
  clear: none;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  color: #0b0c0c;
  padding-bottom: 2px;
}

.c2 {
  margin-bottom: 0;
}

.c4 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 700;
  font-size: 16px;
  line-height: 1.25;
  display: block;
  margin-bottom: 15px;
  clear: both;
  color: #b10e1e;
}

.c8 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  box-sizing: border-box;
  width: 100%;
  height: 40px;
  margin-top: 0;
  padding: 5px;
  border: 2px solid #0b0c0c;
  border-radius: 0;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border: 4px solid #b10e1e;
}

.c8:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

.c8::-webkit-outer-spin-button,
.c8::-webkit-inner-spin-button {
  margin: 0;
  -webkit-appearance: none;
}

.c8[type="number"] {
  -moz-appearance: textfield;
}

.c7 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  box-sizing: border-box;
}

.c7:after {
  content: '';
  display: table;
  clear: both;
}

.c6 {
  margin-bottom: 0;
  margin-right: 20px;
  margin-bottom: 0;
  width: 50px;
}

.c9 {
  margin-bottom: 0;
  margin-right: 20px;
  margin-bottom: 0;
  width: 70px;
}

.c5 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  border-left: 4px solid #b10e1e;
  margin-right: 15px;
  padding-left: 10px;
}

.c0 {
  margin-bottom: 20px;
}

@media only screen and (min-width:641px) {
  .c3 {
    font-size: 19px;
    line-height: 1.3;
  }
}

@media only screen and (min-width:641px) {
  .c2 {
    margin-bottom: 0;
  }
}

@media print {
  .c4 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c4 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media print {
  .c8 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c8 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media only screen and (min-width:641px) {
  .c6 {
    margin-bottom: 0;
  }
}

@media only screen and (min-width:641px) {
  .c9 {
    margin-bottom: 0;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 30px;
  }
}

<Styled(DateField)
  errorText="example"
>
  <StyledComponent
    errorText="example"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jzJRlG",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
          ],
        },
        "displayName": "Styled(DateField)",
        "foldedComponentIds": Array [],
        "propTypes": Object {
          "margin": [Function],
          "mb": [Function],
          "padding": [Function],
        },
        "render": [Function],
        "styledComponentId": "sc-jzJRlG",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      }
    }
    forwardedRef={null}
  >
    <DateField
      className="c0"
      defaultValues={
        Object {
          "day": undefined,
          "month": undefined,
          "year": undefined,
        }
      }
      errorText="example"
      inputNames={
        Object {
          "day": undefined,
          "month": undefined,
          "year": undefined,
        }
      }
    >
      <styled.div
        className="c0"
        errorText="example"
      >
        <StyledComponent
          className="c0"
          errorText="example"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "display: flex; flex-direction: column;",
                  [Function],
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c0 c1"
          >
            <Styled(LabelText)
              errorText="example"
            >
              <StyledComponent
                errorText="example"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        [Function],
                      ],
                    },
                    "displayName": "Styled(LabelText)",
                    "foldedComponentIds": Array [],
                    "propTypes": Object {
                      "margin": [Function],
                      "mb": [Function],
                      "padding": [Function],
                    },
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
              >
                <LabelText
                  className="c2"
                  errorText="example"
                >
                  <styled.span
                    className="c2"
                    errorText="example"
                  >
                    <StyledComponent
                      className="c2"
                      errorText="example"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bxivhb",
                            "isStatic": false,
                            "lastClassName": "c3",
                            "rules": Array [
                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; display: block; clear: none; font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #0b0c0c; padding-bottom: 2px;",
                              [Function],
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bxivhb",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <span
                        className="c2 c3"
                      >
                        example
                      </span>
                    </StyledComponent>
                  </styled.span>
                </LabelText>
              </StyledComponent>
            </Styled(LabelText)>
            <Styled(ErrorText)
              errorText="example"
            >
              <StyledComponent
                errorText="example"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bZQynM",
                      "isStatic": false,
                      "lastClassName": "bOrPFB",
                      "rules": Array [
                        [Function],
                      ],
                    },
                    "displayName": "Styled(ErrorText)",
                    "foldedComponentIds": Array [],
                    "propTypes": Object {
                      "margin": [Function],
                      "mb": [Function],
                      "padding": [Function],
                    },
                    "render": [Function],
                    "styledComponentId": "sc-bZQynM",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
              >
                <ErrorText
                  className=""
                  errorText="example"
                >
                  <styled.span
                    className=""
                    errorText="example"
                  >
                    <StyledComponent
                      className=""
                      errorText="example"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": true,
                            "lastClassName": "c4",
                            "rules": Array [
                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 700; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                              "display: block; margin-bottom: 15px; clear: both; color: #b10e1e;",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <span
                        className="c4"
                      >
                        example
                      </span>
                    </StyledComponent>
                  </styled.span>
                </ErrorText>
              </StyledComponent>
            </Styled(ErrorText)>
            <MultiInputInput
              defaultValues={
                Object {
                  "day": undefined,
                  "month": undefined,
                  "year": undefined,
                }
              }
              error={true}
              names={
                Object {
                  "day": undefined,
                  "month": undefined,
                  "year": undefined,
                }
              }
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              value={Object {}}
            >
              <Input
                defaultValues={
                  Object {
                    "day": undefined,
                    "month": undefined,
                    "year": undefined,
                  }
                }
                error={true}
                labels={
                  Object {
                    "day": "Day",
                    "month": "Month",
                    "year": "Year",
                  }
                }
                names={
                  Object {
                    "day": undefined,
                    "month": undefined,
                    "year": undefined,
                  }
                }
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                refs={[Function]}
                value={Object {}}
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-jTzLTM",
                          "isStatic": true,
                          "lastClassName": "c5",
                          "rules": Array [
                            "display: flex;",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-jTzLTM",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c5"
                    >
                      <Styled(Styled(Label))
                        year={false}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-VigVT",
                                "isStatic": false,
                                "lastClassName": "c9",
                                "rules": Array [
                                  [Function],
                                  "margin-right: 20px; margin-bottom: 0;",
                                  [Function],
                                ],
                              },
                              "displayName": "Styled(Styled(Label))",
                              "foldedComponentIds": Array [
                                "sc-gqjmRU",
                              ],
                              "propTypes": Object {
                                "margin": [Function],
                                "mb": [Function],
                                "padding": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "sc-VigVT",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          year={false}
                        >
                          <Label
                            className="c6"
                            year={false}
                          >
                            <styled.label
                              className="c6"
                              year={false}
                            >
                              <StyledComponent
                                className="c6"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-gZMcBi",
                                      "isStatic": false,
                                      "lastClassName": "c7",
                                      "rules": Array [
                                        "display: flex; flex-direction: column; box-sizing: border-box; :after {
  content: ''; display: table; clear: both;
}",
                                        [Function],
                                      ],
                                    },
                                    "displayName": "styled.label",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-gZMcBi",
                                    "target": "label",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                year={false}
                              >
                                <label
                                  className="c6 c7"
                                >
                                  <Styled(LabelText)>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "c2",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Styled(LabelText)",
                                          "foldedComponentIds": Array [],
                                          "propTypes": Object {
                                            "margin": [Function],
                                            "mb": [Function],
                                            "padding": [Function],
                                          },
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                          Symbol(Symbol.hasInstance): [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <LabelText
                                        className="c2"
                                      >
                                        <styled.span
                                          className="c2"
                                        >
                                          <StyledComponent
                                            className="c2"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "c3",
                                                  "rules": Array [
                                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; display: block; clear: none; font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #0b0c0c; padding-bottom: 2px;",
                                                    [Function],
                                                  ],
                                                },
                                                "displayName": "styled.span",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "span",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <span
                                              className="c2 c3"
                                            >
                                              Day
                                            </span>
                                          </StyledComponent>
                                        </styled.span>
                                      </LabelText>
                                    </StyledComponent>
                                  </Styled(LabelText)>
                                  <styled.input
                                    error={true}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    type="number"
                                  >
                                    <StyledComponent
                                      error={true}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "c8",
                                            "rules": Array [
                                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                              "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                                              "box-sizing: border-box; width: 100%; height: 40px; margin-top: 0; padding: 5px; border: 2px solid #0b0c0c; border-radius: 0; appearance: none; &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {
  margin: 0; -webkit-appearance: none;
} &[type=\\"number\\"] {
  -moz-appearance: textfield;
}",
                                              [Function],
                                            ],
                                          },
                                          "displayName": "styled.input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      type="number"
                                    >
                                      <input
                                        className="c8"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        type="number"
                                      />
                                    </StyledComponent>
                                  </styled.input>
                                </label>
                              </StyledComponent>
                            </styled.label>
                          </Label>
                        </StyledComponent>
                      </Styled(Styled(Label))>
                      <Styled(Styled(Label))
                        year={false}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-VigVT",
                                "isStatic": false,
                                "lastClassName": "c9",
                                "rules": Array [
                                  [Function],
                                  "margin-right: 20px; margin-bottom: 0;",
                                  [Function],
                                ],
                              },
                              "displayName": "Styled(Styled(Label))",
                              "foldedComponentIds": Array [
                                "sc-gqjmRU",
                              ],
                              "propTypes": Object {
                                "margin": [Function],
                                "mb": [Function],
                                "padding": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "sc-VigVT",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          year={false}
                        >
                          <Label
                            className="c6"
                            year={false}
                          >
                            <styled.label
                              className="c6"
                              year={false}
                            >
                              <StyledComponent
                                className="c6"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-gZMcBi",
                                      "isStatic": false,
                                      "lastClassName": "c7",
                                      "rules": Array [
                                        "display: flex; flex-direction: column; box-sizing: border-box; :after {
  content: ''; display: table; clear: both;
}",
                                        [Function],
                                      ],
                                    },
                                    "displayName": "styled.label",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-gZMcBi",
                                    "target": "label",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                year={false}
                              >
                                <label
                                  className="c6 c7"
                                >
                                  <Styled(LabelText)>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "c2",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Styled(LabelText)",
                                          "foldedComponentIds": Array [],
                                          "propTypes": Object {
                                            "margin": [Function],
                                            "mb": [Function],
                                            "padding": [Function],
                                          },
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                          Symbol(Symbol.hasInstance): [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <LabelText
                                        className="c2"
                                      >
                                        <styled.span
                                          className="c2"
                                        >
                                          <StyledComponent
                                            className="c2"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "c3",
                                                  "rules": Array [
                                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; display: block; clear: none; font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #0b0c0c; padding-bottom: 2px;",
                                                    [Function],
                                                  ],
                                                },
                                                "displayName": "styled.span",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "span",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <span
                                              className="c2 c3"
                                            >
                                              Month
                                            </span>
                                          </StyledComponent>
                                        </styled.span>
                                      </LabelText>
                                    </StyledComponent>
                                  </Styled(LabelText)>
                                  <styled.input
                                    error={true}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    type="number"
                                  >
                                    <StyledComponent
                                      error={true}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "c8",
                                            "rules": Array [
                                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                              "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                                              "box-sizing: border-box; width: 100%; height: 40px; margin-top: 0; padding: 5px; border: 2px solid #0b0c0c; border-radius: 0; appearance: none; &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {
  margin: 0; -webkit-appearance: none;
} &[type=\\"number\\"] {
  -moz-appearance: textfield;
}",
                                              [Function],
                                            ],
                                          },
                                          "displayName": "styled.input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      type="number"
                                    >
                                      <input
                                        className="c8"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        type="number"
                                      />
                                    </StyledComponent>
                                  </styled.input>
                                </label>
                              </StyledComponent>
                            </styled.label>
                          </Label>
                        </StyledComponent>
                      </Styled(Styled(Label))>
                      <Styled(Styled(Label))
                        year={true}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-VigVT",
                                "isStatic": false,
                                "lastClassName": "c9",
                                "rules": Array [
                                  [Function],
                                  "margin-right: 20px; margin-bottom: 0;",
                                  [Function],
                                ],
                              },
                              "displayName": "Styled(Styled(Label))",
                              "foldedComponentIds": Array [
                                "sc-gqjmRU",
                              ],
                              "propTypes": Object {
                                "margin": [Function],
                                "mb": [Function],
                                "padding": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "sc-VigVT",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          year={true}
                        >
                          <Label
                            className="c9"
                            year={true}
                          >
                            <styled.label
                              className="c9"
                              year={true}
                            >
                              <StyledComponent
                                className="c9"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-gZMcBi",
                                      "isStatic": false,
                                      "lastClassName": "c7",
                                      "rules": Array [
                                        "display: flex; flex-direction: column; box-sizing: border-box; :after {
  content: ''; display: table; clear: both;
}",
                                        [Function],
                                      ],
                                    },
                                    "displayName": "styled.label",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-gZMcBi",
                                    "target": "label",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                year={true}
                              >
                                <label
                                  className="c9 c7"
                                >
                                  <Styled(LabelText)>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "c2",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Styled(LabelText)",
                                          "foldedComponentIds": Array [],
                                          "propTypes": Object {
                                            "margin": [Function],
                                            "mb": [Function],
                                            "padding": [Function],
                                          },
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                          Symbol(Symbol.hasInstance): [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <LabelText
                                        className="c2"
                                      >
                                        <styled.span
                                          className="c2"
                                        >
                                          <StyledComponent
                                            className="c2"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "c3",
                                                  "rules": Array [
                                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; display: block; clear: none; font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #0b0c0c; padding-bottom: 2px;",
                                                    [Function],
                                                  ],
                                                },
                                                "displayName": "styled.span",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "span",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <span
                                              className="c2 c3"
                                            >
                                              Year
                                            </span>
                                          </StyledComponent>
                                        </styled.span>
                                      </LabelText>
                                    </StyledComponent>
                                  </Styled(LabelText)>
                                  <styled.input
                                    error={true}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    type="number"
                                  >
                                    <StyledComponent
                                      error={true}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "c8",
                                            "rules": Array [
                                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                              "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                                              "box-sizing: border-box; width: 100%; height: 40px; margin-top: 0; padding: 5px; border: 2px solid #0b0c0c; border-radius: 0; appearance: none; &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {
  margin: 0; -webkit-appearance: none;
} &[type=\\"number\\"] {
  -moz-appearance: textfield;
}",
                                              [Function],
                                            ],
                                          },
                                          "displayName": "styled.input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      type="number"
                                    >
                                      <input
                                        className="c8"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        type="number"
                                      />
                                    </StyledComponent>
                                  </styled.input>
                                </label>
                              </StyledComponent>
                            </styled.label>
                          </Label>
                        </StyledComponent>
                      </Styled(Styled(Label))>
                    </div>
                  </StyledComponent>
                </styled.div>
              </Input>
            </MultiInputInput>
          </div>
        </StyledComponent>
      </styled.div>
    </DateField>
  </StyledComponent>
</Styled(DateField)>
`;

exports[`DateField should support null value: null value 1`] = `
.c3 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: block;
  clear: none;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  color: #0b0c0c;
  padding-bottom: 2px;
}

.c2 {
  margin-bottom: 0;
}

.c7 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  box-sizing: border-box;
  width: 100%;
  height: 40px;
  margin-top: 0;
  padding: 5px;
  border: 2px solid #0b0c0c;
  border-radius: 0;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}

.c7:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

.c7::-webkit-outer-spin-button,
.c7::-webkit-inner-spin-button {
  margin: 0;
  -webkit-appearance: none;
}

.c7[type="number"] {
  -moz-appearance: textfield;
}

.c6 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  box-sizing: border-box;
}

.c6:after {
  content: '';
  display: table;
  clear: both;
}

.c5 {
  margin-bottom: 0;
  margin-right: 20px;
  margin-bottom: 0;
  width: 50px;
}

.c8 {
  margin-bottom: 0;
  margin-right: 20px;
  margin-bottom: 0;
  width: 70px;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 {
  margin-bottom: 20px;
}

@media only screen and (min-width:641px) {
  .c3 {
    font-size: 19px;
    line-height: 1.3;
  }
}

@media only screen and (min-width:641px) {
  .c2 {
    margin-bottom: 0;
  }
}

@media print {
  .c7 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c7 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media only screen and (min-width:641px) {
  .c5 {
    margin-bottom: 0;
  }
}

@media only screen and (min-width:641px) {
  .c8 {
    margin-bottom: 0;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 30px;
  }
}

<Styled(DateField)
  input={
    Object {
      "value": null,
    }
  }
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jzJRlG",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
          ],
        },
        "displayName": "Styled(DateField)",
        "foldedComponentIds": Array [],
        "propTypes": Object {
          "margin": [Function],
          "mb": [Function],
          "padding": [Function],
        },
        "render": [Function],
        "styledComponentId": "sc-jzJRlG",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      }
    }
    forwardedRef={null}
    input={
      Object {
        "value": null,
      }
    }
  >
    <DateField
      className="c0"
      defaultValues={
        Object {
          "day": undefined,
          "month": undefined,
          "year": undefined,
        }
      }
      input={
        Object {
          "value": null,
        }
      }
      inputNames={
        Object {
          "day": undefined,
          "month": undefined,
          "year": undefined,
        }
      }
    >
      <styled.div
        className="c0"
      >
        <StyledComponent
          className="c0"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "display: flex; flex-direction: column;",
                  [Function],
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c0 c1"
          >
            <Styled(LabelText)>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        [Function],
                      ],
                    },
                    "displayName": "Styled(LabelText)",
                    "foldedComponentIds": Array [],
                    "propTypes": Object {
                      "margin": [Function],
                      "mb": [Function],
                      "padding": [Function],
                    },
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
              >
                <LabelText
                  className="c2"
                >
                  <styled.span
                    className="c2"
                  >
                    <StyledComponent
                      className="c2"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bxivhb",
                            "isStatic": false,
                            "lastClassName": "c3",
                            "rules": Array [
                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; display: block; clear: none; font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #0b0c0c; padding-bottom: 2px;",
                              [Function],
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bxivhb",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <span
                        className="c2 c3"
                      />
                    </StyledComponent>
                  </styled.span>
                </LabelText>
              </StyledComponent>
            </Styled(LabelText)>
            <MultiInputInput
              defaultValues={
                Object {
                  "day": undefined,
                  "month": undefined,
                  "year": undefined,
                }
              }
              error={false}
              names={
                Object {
                  "day": undefined,
                  "month": undefined,
                  "year": undefined,
                }
              }
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              value={null}
            >
              <Input
                defaultValues={
                  Object {
                    "day": undefined,
                    "month": undefined,
                    "year": undefined,
                  }
                }
                error={false}
                labels={
                  Object {
                    "day": "Day",
                    "month": "Month",
                    "year": "Year",
                  }
                }
                names={
                  Object {
                    "day": undefined,
                    "month": undefined,
                    "year": undefined,
                  }
                }
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                refs={[Function]}
                value={null}
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-jTzLTM",
                          "isStatic": true,
                          "lastClassName": "c4",
                          "rules": Array [
                            "display: flex;",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-jTzLTM",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c4"
                    >
                      <Styled(Styled(Label))
                        year={false}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-VigVT",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  [Function],
                                  "margin-right: 20px; margin-bottom: 0;",
                                  [Function],
                                ],
                              },
                              "displayName": "Styled(Styled(Label))",
                              "foldedComponentIds": Array [
                                "sc-gqjmRU",
                              ],
                              "propTypes": Object {
                                "margin": [Function],
                                "mb": [Function],
                                "padding": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "sc-VigVT",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          year={false}
                        >
                          <Label
                            className="c5"
                            year={false}
                          >
                            <styled.label
                              className="c5"
                              year={false}
                            >
                              <StyledComponent
                                className="c5"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-gZMcBi",
                                      "isStatic": false,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display: flex; flex-direction: column; box-sizing: border-box; :after {
  content: ''; display: table; clear: both;
}",
                                        [Function],
                                      ],
                                    },
                                    "displayName": "styled.label",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-gZMcBi",
                                    "target": "label",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                year={false}
                              >
                                <label
                                  className="c5 c6"
                                >
                                  <Styled(LabelText)>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "c2",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Styled(LabelText)",
                                          "foldedComponentIds": Array [],
                                          "propTypes": Object {
                                            "margin": [Function],
                                            "mb": [Function],
                                            "padding": [Function],
                                          },
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                          Symbol(Symbol.hasInstance): [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <LabelText
                                        className="c2"
                                      >
                                        <styled.span
                                          className="c2"
                                        >
                                          <StyledComponent
                                            className="c2"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "c3",
                                                  "rules": Array [
                                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; display: block; clear: none; font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #0b0c0c; padding-bottom: 2px;",
                                                    [Function],
                                                  ],
                                                },
                                                "displayName": "styled.span",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "span",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <span
                                              className="c2 c3"
                                            >
                                              Day
                                            </span>
                                          </StyledComponent>
                                        </styled.span>
                                      </LabelText>
                                    </StyledComponent>
                                  </Styled(LabelText)>
                                  <styled.input
                                    error={false}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    type="number"
                                  >
                                    <StyledComponent
                                      error={false}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "c7",
                                            "rules": Array [
                                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                              "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                                              "box-sizing: border-box; width: 100%; height: 40px; margin-top: 0; padding: 5px; border: 2px solid #0b0c0c; border-radius: 0; appearance: none; &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {
  margin: 0; -webkit-appearance: none;
} &[type=\\"number\\"] {
  -moz-appearance: textfield;
}",
                                              [Function],
                                            ],
                                          },
                                          "displayName": "styled.input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      type="number"
                                    >
                                      <input
                                        className="c7"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        type="number"
                                      />
                                    </StyledComponent>
                                  </styled.input>
                                </label>
                              </StyledComponent>
                            </styled.label>
                          </Label>
                        </StyledComponent>
                      </Styled(Styled(Label))>
                      <Styled(Styled(Label))
                        year={false}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-VigVT",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  [Function],
                                  "margin-right: 20px; margin-bottom: 0;",
                                  [Function],
                                ],
                              },
                              "displayName": "Styled(Styled(Label))",
                              "foldedComponentIds": Array [
                                "sc-gqjmRU",
                              ],
                              "propTypes": Object {
                                "margin": [Function],
                                "mb": [Function],
                                "padding": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "sc-VigVT",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          year={false}
                        >
                          <Label
                            className="c5"
                            year={false}
                          >
                            <styled.label
                              className="c5"
                              year={false}
                            >
                              <StyledComponent
                                className="c5"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-gZMcBi",
                                      "isStatic": false,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display: flex; flex-direction: column; box-sizing: border-box; :after {
  content: ''; display: table; clear: both;
}",
                                        [Function],
                                      ],
                                    },
                                    "displayName": "styled.label",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-gZMcBi",
                                    "target": "label",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                year={false}
                              >
                                <label
                                  className="c5 c6"
                                >
                                  <Styled(LabelText)>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "c2",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Styled(LabelText)",
                                          "foldedComponentIds": Array [],
                                          "propTypes": Object {
                                            "margin": [Function],
                                            "mb": [Function],
                                            "padding": [Function],
                                          },
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                          Symbol(Symbol.hasInstance): [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <LabelText
                                        className="c2"
                                      >
                                        <styled.span
                                          className="c2"
                                        >
                                          <StyledComponent
                                            className="c2"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "c3",
                                                  "rules": Array [
                                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; display: block; clear: none; font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #0b0c0c; padding-bottom: 2px;",
                                                    [Function],
                                                  ],
                                                },
                                                "displayName": "styled.span",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "span",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <span
                                              className="c2 c3"
                                            >
                                              Month
                                            </span>
                                          </StyledComponent>
                                        </styled.span>
                                      </LabelText>
                                    </StyledComponent>
                                  </Styled(LabelText)>
                                  <styled.input
                                    error={false}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    type="number"
                                  >
                                    <StyledComponent
                                      error={false}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "c7",
                                            "rules": Array [
                                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                              "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                                              "box-sizing: border-box; width: 100%; height: 40px; margin-top: 0; padding: 5px; border: 2px solid #0b0c0c; border-radius: 0; appearance: none; &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {
  margin: 0; -webkit-appearance: none;
} &[type=\\"number\\"] {
  -moz-appearance: textfield;
}",
                                              [Function],
                                            ],
                                          },
                                          "displayName": "styled.input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      type="number"
                                    >
                                      <input
                                        className="c7"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        type="number"
                                      />
                                    </StyledComponent>
                                  </styled.input>
                                </label>
                              </StyledComponent>
                            </styled.label>
                          </Label>
                        </StyledComponent>
                      </Styled(Styled(Label))>
                      <Styled(Styled(Label))
                        year={true}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-VigVT",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  [Function],
                                  "margin-right: 20px; margin-bottom: 0;",
                                  [Function],
                                ],
                              },
                              "displayName": "Styled(Styled(Label))",
                              "foldedComponentIds": Array [
                                "sc-gqjmRU",
                              ],
                              "propTypes": Object {
                                "margin": [Function],
                                "mb": [Function],
                                "padding": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "sc-VigVT",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          year={true}
                        >
                          <Label
                            className="c8"
                            year={true}
                          >
                            <styled.label
                              className="c8"
                              year={true}
                            >
                              <StyledComponent
                                className="c8"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-gZMcBi",
                                      "isStatic": false,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display: flex; flex-direction: column; box-sizing: border-box; :after {
  content: ''; display: table; clear: both;
}",
                                        [Function],
                                      ],
                                    },
                                    "displayName": "styled.label",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-gZMcBi",
                                    "target": "label",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                year={true}
                              >
                                <label
                                  className="c8 c6"
                                >
                                  <Styled(LabelText)>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "c2",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Styled(LabelText)",
                                          "foldedComponentIds": Array [],
                                          "propTypes": Object {
                                            "margin": [Function],
                                            "mb": [Function],
                                            "padding": [Function],
                                          },
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                          Symbol(Symbol.hasInstance): [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <LabelText
                                        className="c2"
                                      >
                                        <styled.span
                                          className="c2"
                                        >
                                          <StyledComponent
                                            className="c2"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "c3",
                                                  "rules": Array [
                                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; display: block; clear: none; font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #0b0c0c; padding-bottom: 2px;",
                                                    [Function],
                                                  ],
                                                },
                                                "displayName": "styled.span",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "span",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <span
                                              className="c2 c3"
                                            >
                                              Year
                                            </span>
                                          </StyledComponent>
                                        </styled.span>
                                      </LabelText>
                                    </StyledComponent>
                                  </Styled(LabelText)>
                                  <styled.input
                                    error={false}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    type="number"
                                  >
                                    <StyledComponent
                                      error={false}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "c7",
                                            "rules": Array [
                                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                              "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                                              "box-sizing: border-box; width: 100%; height: 40px; margin-top: 0; padding: 5px; border: 2px solid #0b0c0c; border-radius: 0; appearance: none; &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {
  margin: 0; -webkit-appearance: none;
} &[type=\\"number\\"] {
  -moz-appearance: textfield;
}",
                                              [Function],
                                            ],
                                          },
                                          "displayName": "styled.input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      type="number"
                                    >
                                      <input
                                        className="c7"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        type="number"
                                      />
                                    </StyledComponent>
                                  </styled.input>
                                </label>
                              </StyledComponent>
                            </styled.label>
                          </Label>
                        </StyledComponent>
                      </Styled(Styled(Label))>
                    </div>
                  </StyledComponent>
                </styled.div>
              </Input>
            </MultiInputInput>
          </div>
        </StyledComponent>
      </styled.div>
    </DateField>
  </StyledComponent>
</Styled(DateField)>
`;

exports[`DateField should support setting value: value 1 2 3 1`] = `
.c3 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: block;
  clear: none;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  color: #0b0c0c;
  padding-bottom: 2px;
}

.c2 {
  margin-bottom: 0;
}

.c7 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  box-sizing: border-box;
  width: 100%;
  height: 40px;
  margin-top: 0;
  padding: 5px;
  border: 2px solid #0b0c0c;
  border-radius: 0;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}

.c7:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

.c7::-webkit-outer-spin-button,
.c7::-webkit-inner-spin-button {
  margin: 0;
  -webkit-appearance: none;
}

.c7[type="number"] {
  -moz-appearance: textfield;
}

.c6 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  box-sizing: border-box;
}

.c6:after {
  content: '';
  display: table;
  clear: both;
}

.c5 {
  margin-bottom: 0;
  margin-right: 20px;
  margin-bottom: 0;
  width: 50px;
}

.c8 {
  margin-bottom: 0;
  margin-right: 20px;
  margin-bottom: 0;
  width: 70px;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 {
  margin-bottom: 20px;
}

@media only screen and (min-width:641px) {
  .c3 {
    font-size: 19px;
    line-height: 1.3;
  }
}

@media only screen and (min-width:641px) {
  .c2 {
    margin-bottom: 0;
  }
}

@media print {
  .c7 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c7 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media only screen and (min-width:641px) {
  .c5 {
    margin-bottom: 0;
  }
}

@media only screen and (min-width:641px) {
  .c8 {
    margin-bottom: 0;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 30px;
  }
}

<Styled(DateField)
  input={
    Object {
      "value": Object {
        "day": "1",
        "month": "2",
        "year": "3",
      },
    }
  }
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jzJRlG",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
          ],
        },
        "displayName": "Styled(DateField)",
        "foldedComponentIds": Array [],
        "propTypes": Object {
          "margin": [Function],
          "mb": [Function],
          "padding": [Function],
        },
        "render": [Function],
        "styledComponentId": "sc-jzJRlG",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      }
    }
    forwardedRef={null}
    input={
      Object {
        "value": Object {
          "day": "1",
          "month": "2",
          "year": "3",
        },
      }
    }
  >
    <DateField
      className="c0"
      defaultValues={
        Object {
          "day": undefined,
          "month": undefined,
          "year": undefined,
        }
      }
      input={
        Object {
          "value": Object {
            "day": "1",
            "month": "2",
            "year": "3",
          },
        }
      }
      inputNames={
        Object {
          "day": undefined,
          "month": undefined,
          "year": undefined,
        }
      }
    >
      <styled.div
        className="c0"
      >
        <StyledComponent
          className="c0"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "display: flex; flex-direction: column;",
                  [Function],
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c0 c1"
          >
            <Styled(LabelText)>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        [Function],
                      ],
                    },
                    "displayName": "Styled(LabelText)",
                    "foldedComponentIds": Array [],
                    "propTypes": Object {
                      "margin": [Function],
                      "mb": [Function],
                      "padding": [Function],
                    },
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
              >
                <LabelText
                  className="c2"
                >
                  <styled.span
                    className="c2"
                  >
                    <StyledComponent
                      className="c2"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bxivhb",
                            "isStatic": false,
                            "lastClassName": "c3",
                            "rules": Array [
                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; display: block; clear: none; font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #0b0c0c; padding-bottom: 2px;",
                              [Function],
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bxivhb",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <span
                        className="c2 c3"
                      />
                    </StyledComponent>
                  </styled.span>
                </LabelText>
              </StyledComponent>
            </Styled(LabelText)>
            <MultiInputInput
              defaultValues={
                Object {
                  "day": undefined,
                  "month": undefined,
                  "year": undefined,
                }
              }
              error={false}
              names={
                Object {
                  "day": undefined,
                  "month": undefined,
                  "year": undefined,
                }
              }
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              value={
                Object {
                  "day": "1",
                  "month": "2",
                  "year": "3",
                }
              }
            >
              <Input
                defaultValues={
                  Object {
                    "day": undefined,
                    "month": undefined,
                    "year": undefined,
                  }
                }
                error={false}
                labels={
                  Object {
                    "day": "Day",
                    "month": "Month",
                    "year": "Year",
                  }
                }
                names={
                  Object {
                    "day": undefined,
                    "month": undefined,
                    "year": undefined,
                  }
                }
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                refs={[Function]}
                value={
                  Object {
                    "day": "1",
                    "month": "2",
                    "year": "3",
                  }
                }
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-jTzLTM",
                          "isStatic": true,
                          "lastClassName": "c4",
                          "rules": Array [
                            "display: flex;",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-jTzLTM",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c4"
                    >
                      <Styled(Styled(Label))
                        year={false}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-VigVT",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  [Function],
                                  "margin-right: 20px; margin-bottom: 0;",
                                  [Function],
                                ],
                              },
                              "displayName": "Styled(Styled(Label))",
                              "foldedComponentIds": Array [
                                "sc-gqjmRU",
                              ],
                              "propTypes": Object {
                                "margin": [Function],
                                "mb": [Function],
                                "padding": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "sc-VigVT",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          year={false}
                        >
                          <Label
                            className="c5"
                            year={false}
                          >
                            <styled.label
                              className="c5"
                              year={false}
                            >
                              <StyledComponent
                                className="c5"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-gZMcBi",
                                      "isStatic": false,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display: flex; flex-direction: column; box-sizing: border-box; :after {
  content: ''; display: table; clear: both;
}",
                                        [Function],
                                      ],
                                    },
                                    "displayName": "styled.label",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-gZMcBi",
                                    "target": "label",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                year={false}
                              >
                                <label
                                  className="c5 c6"
                                >
                                  <Styled(LabelText)>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "c2",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Styled(LabelText)",
                                          "foldedComponentIds": Array [],
                                          "propTypes": Object {
                                            "margin": [Function],
                                            "mb": [Function],
                                            "padding": [Function],
                                          },
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                          Symbol(Symbol.hasInstance): [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <LabelText
                                        className="c2"
                                      >
                                        <styled.span
                                          className="c2"
                                        >
                                          <StyledComponent
                                            className="c2"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "c3",
                                                  "rules": Array [
                                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; display: block; clear: none; font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #0b0c0c; padding-bottom: 2px;",
                                                    [Function],
                                                  ],
                                                },
                                                "displayName": "styled.span",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "span",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <span
                                              className="c2 c3"
                                            >
                                              Day
                                            </span>
                                          </StyledComponent>
                                        </styled.span>
                                      </LabelText>
                                    </StyledComponent>
                                  </Styled(LabelText)>
                                  <styled.input
                                    error={false}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    type="number"
                                    value="1"
                                  >
                                    <StyledComponent
                                      error={false}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "c7",
                                            "rules": Array [
                                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                              "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                                              "box-sizing: border-box; width: 100%; height: 40px; margin-top: 0; padding: 5px; border: 2px solid #0b0c0c; border-radius: 0; appearance: none; &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {
  margin: 0; -webkit-appearance: none;
} &[type=\\"number\\"] {
  -moz-appearance: textfield;
}",
                                              [Function],
                                            ],
                                          },
                                          "displayName": "styled.input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      type="number"
                                      value="1"
                                    >
                                      <input
                                        className="c7"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        type="number"
                                        value="1"
                                      />
                                    </StyledComponent>
                                  </styled.input>
                                </label>
                              </StyledComponent>
                            </styled.label>
                          </Label>
                        </StyledComponent>
                      </Styled(Styled(Label))>
                      <Styled(Styled(Label))
                        year={false}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-VigVT",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  [Function],
                                  "margin-right: 20px; margin-bottom: 0;",
                                  [Function],
                                ],
                              },
                              "displayName": "Styled(Styled(Label))",
                              "foldedComponentIds": Array [
                                "sc-gqjmRU",
                              ],
                              "propTypes": Object {
                                "margin": [Function],
                                "mb": [Function],
                                "padding": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "sc-VigVT",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          year={false}
                        >
                          <Label
                            className="c5"
                            year={false}
                          >
                            <styled.label
                              className="c5"
                              year={false}
                            >
                              <StyledComponent
                                className="c5"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-gZMcBi",
                                      "isStatic": false,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display: flex; flex-direction: column; box-sizing: border-box; :after {
  content: ''; display: table; clear: both;
}",
                                        [Function],
                                      ],
                                    },
                                    "displayName": "styled.label",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-gZMcBi",
                                    "target": "label",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                year={false}
                              >
                                <label
                                  className="c5 c6"
                                >
                                  <Styled(LabelText)>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "c2",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Styled(LabelText)",
                                          "foldedComponentIds": Array [],
                                          "propTypes": Object {
                                            "margin": [Function],
                                            "mb": [Function],
                                            "padding": [Function],
                                          },
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                          Symbol(Symbol.hasInstance): [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <LabelText
                                        className="c2"
                                      >
                                        <styled.span
                                          className="c2"
                                        >
                                          <StyledComponent
                                            className="c2"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "c3",
                                                  "rules": Array [
                                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; display: block; clear: none; font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #0b0c0c; padding-bottom: 2px;",
                                                    [Function],
                                                  ],
                                                },
                                                "displayName": "styled.span",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "span",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <span
                                              className="c2 c3"
                                            >
                                              Month
                                            </span>
                                          </StyledComponent>
                                        </styled.span>
                                      </LabelText>
                                    </StyledComponent>
                                  </Styled(LabelText)>
                                  <styled.input
                                    error={false}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    type="number"
                                    value="2"
                                  >
                                    <StyledComponent
                                      error={false}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "c7",
                                            "rules": Array [
                                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                              "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                                              "box-sizing: border-box; width: 100%; height: 40px; margin-top: 0; padding: 5px; border: 2px solid #0b0c0c; border-radius: 0; appearance: none; &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {
  margin: 0; -webkit-appearance: none;
} &[type=\\"number\\"] {
  -moz-appearance: textfield;
}",
                                              [Function],
                                            ],
                                          },
                                          "displayName": "styled.input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      type="number"
                                      value="2"
                                    >
                                      <input
                                        className="c7"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        type="number"
                                        value="2"
                                      />
                                    </StyledComponent>
                                  </styled.input>
                                </label>
                              </StyledComponent>
                            </styled.label>
                          </Label>
                        </StyledComponent>
                      </Styled(Styled(Label))>
                      <Styled(Styled(Label))
                        year={true}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-VigVT",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  [Function],
                                  "margin-right: 20px; margin-bottom: 0;",
                                  [Function],
                                ],
                              },
                              "displayName": "Styled(Styled(Label))",
                              "foldedComponentIds": Array [
                                "sc-gqjmRU",
                              ],
                              "propTypes": Object {
                                "margin": [Function],
                                "mb": [Function],
                                "padding": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "sc-VigVT",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          year={true}
                        >
                          <Label
                            className="c8"
                            year={true}
                          >
                            <styled.label
                              className="c8"
                              year={true}
                            >
                              <StyledComponent
                                className="c8"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-gZMcBi",
                                      "isStatic": false,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display: flex; flex-direction: column; box-sizing: border-box; :after {
  content: ''; display: table; clear: both;
}",
                                        [Function],
                                      ],
                                    },
                                    "displayName": "styled.label",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-gZMcBi",
                                    "target": "label",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                year={true}
                              >
                                <label
                                  className="c8 c6"
                                >
                                  <Styled(LabelText)>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "c2",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Styled(LabelText)",
                                          "foldedComponentIds": Array [],
                                          "propTypes": Object {
                                            "margin": [Function],
                                            "mb": [Function],
                                            "padding": [Function],
                                          },
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                          Symbol(Symbol.hasInstance): [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <LabelText
                                        className="c2"
                                      >
                                        <styled.span
                                          className="c2"
                                        >
                                          <StyledComponent
                                            className="c2"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "c3",
                                                  "rules": Array [
                                                    "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; display: block; clear: none; font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #0b0c0c; padding-bottom: 2px;",
                                                    [Function],
                                                  ],
                                                },
                                                "displayName": "styled.span",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "span",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <span
                                              className="c2 c3"
                                            >
                                              Year
                                            </span>
                                          </StyledComponent>
                                        </styled.span>
                                      </LabelText>
                                    </StyledComponent>
                                  </Styled(LabelText)>
                                  <styled.input
                                    error={false}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    type="number"
                                    value="3"
                                  >
                                    <StyledComponent
                                      error={false}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "c7",
                                            "rules": Array [
                                              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                              "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                                              "box-sizing: border-box; width: 100%; height: 40px; margin-top: 0; padding: 5px; border: 2px solid #0b0c0c; border-radius: 0; appearance: none; &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {
  margin: 0; -webkit-appearance: none;
} &[type=\\"number\\"] {
  -moz-appearance: textfield;
}",
                                              [Function],
                                            ],
                                          },
                                          "displayName": "styled.input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      type="number"
                                      value="3"
                                    >
                                      <input
                                        className="c7"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        type="number"
                                        value="3"
                                      />
                                    </StyledComponent>
                                  </styled.input>
                                </label>
                              </StyledComponent>
                            </styled.label>
                          </Label>
                        </StyledComponent>
                      </Styled(Styled(Label))>
                    </div>
                  </StyledComponent>
                </styled.div>
              </Input>
            </MultiInputInput>
          </div>
        </StyledComponent>
      </styled.div>
    </DateField>
  </StyledComponent>
</Styled(DateField)>
`;
