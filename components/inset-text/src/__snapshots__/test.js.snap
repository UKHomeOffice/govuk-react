// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`inset text matches the InsetText snapshot: inset text 1`] = `
.emotion-5 {
  margin-bottom: 20px;
}

@media only screen and (min-width:641px) {
  .emotion-5 {
    margin-bottom: 30px;
  }
}

.emotion-4 {
  box-sizing: border-box;
  border-left-style: solid;
  border-left-width: 10px;
  border-color: #bfc1c3;
  padding: 15px;
  margin-bottom: 20px;
}

@media only screen and (min-width:641px) {
  .emotion-4 {
    margin-bottom: 30px;
  }
}

.emotion-2 {
  margin-bottom: 0;
}

@media only screen and (min-width:641px) {
  .emotion-2 {
    margin-bottom: 0;
  }
}

.emotion-0 {
  font-family: "nta",Arial,sans-serif;
  margin: 0;
  font-size: 16px;
  line-height: 1.25;
  margin-bottom: 0;
}

.emotion-0 > p {
  margin: 0;
}

.emotion-0 > p > code {
  padding: 0.2em 0.4em;
  margin: 0px;
  font-size: 85%;
  background-color: rgba(27,31,35,0.05);
  border-radius: 3px;
}

.emotion-0 > pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #f6f8fa;
  border-radius: 3px;
}

.emotion-0 > pre > code {
  display: inline;
  padding: 0px;
  margin: 0px;
  border: 0px;
  overflow: visible;
  line-height: inherit;
  word-wrap: normal;
}

@media only screen and (min-width:641px) {
  .emotion-0 {
    font-size: 19px;
    line-height: 1.3;
  }
}

@media only screen and (min-width:641px) {
  .emotion-0 {
    margin-bottom: 0;
  }
}

<_default>
  <Styled(InsetText)
    isNarrow={false}
  >
    <InsetText
      className="emotion-5"
      isNarrow={false}
    >
      <Styled(div)
        className="emotion-5"
        isNarrow={false}
      >
        <div
          className="emotion-4"
        >
          <Styled(Paragraph)
            mb={0}
          >
            <Paragraph
              className="emotion-2"
              mb={0}
              supportingText={false}
            >
              <Styled(ReactMarkdown)
                allowedTypes={
                  Array [
                    "paragraph",
                    "emphasis",
                    "strong",
                    "link",
                    "inlineCode",
                    "code",
                  ]
                }
                className="emotion-2"
                escapeHtml={false}
                mb={0}
                renderers={
                  Object {
                    "link": [Function],
                  }
                }
                skipHtml={true}
                source="It can take up to 8 weeks to register a lasting power of attorney if there are no mistakes in the application."
                supportingText={false}
              >
                <ReactMarkdown
                  allowedTypes={
                    Array [
                      "paragraph",
                      "emphasis",
                      "strong",
                      "link",
                      "inlineCode",
                      "code",
                    ]
                  }
                  astPlugins={Array []}
                  className="emotion-0"
                  escapeHtml={false}
                  mb={0}
                  plugins={Array []}
                  rawSourcePos={false}
                  renderers={
                    Object {
                      "link": [Function],
                    }
                  }
                  skipHtml={true}
                  source="It can take up to 8 weeks to register a lasting power of attorney if there are no mistakes in the application."
                  sourcePos={false}
                  supportingText={false}
                  transformLinkUri={[Function]}
                >
                  <div
                    className="emotion-0"
                    key="root-1-1"
                  >
                    <p
                      key="paragraph-1-1"
                    >
                      It can take up to 8 weeks to register a lasting power of attorney if there are no mistakes in the application.
                    </p>
                  </div>
                </ReactMarkdown>
              </Styled(ReactMarkdown)>
            </Paragraph>
          </Styled(Paragraph)>
        </div>
      </Styled(div)>
    </InsetText>
  </Styled(InsetText)>
</_default>
`;

exports[`inset text matches the InsetTextNarrowBorder snapshot: inset text narrow border 1`] = `
.emotion-5 {
  margin-bottom: 20px;
}

@media only screen and (min-width:641px) {
  .emotion-5 {
    margin-bottom: 30px;
  }
}

.emotion-2 {
  margin-bottom: 0;
}

@media only screen and (min-width:641px) {
  .emotion-2 {
    margin-bottom: 0;
  }
}

.emotion-0 {
  font-family: "nta",Arial,sans-serif;
  margin: 0;
  font-size: 16px;
  line-height: 1.25;
  margin-bottom: 0;
}

.emotion-0 > p {
  margin: 0;
}

.emotion-0 > p > code {
  padding: 0.2em 0.4em;
  margin: 0px;
  font-size: 85%;
  background-color: rgba(27,31,35,0.05);
  border-radius: 3px;
}

.emotion-0 > pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #f6f8fa;
  border-radius: 3px;
}

.emotion-0 > pre > code {
  display: inline;
  padding: 0px;
  margin: 0px;
  border: 0px;
  overflow: visible;
  line-height: inherit;
  word-wrap: normal;
}

@media only screen and (min-width:641px) {
  .emotion-0 {
    font-size: 19px;
    line-height: 1.3;
  }
}

@media only screen and (min-width:641px) {
  .emotion-0 {
    margin-bottom: 0;
  }
}

.emotion-4 {
  box-sizing: border-box;
  border-left-style: solid;
  border-left-width: 5px;
  border-color: #bfc1c3;
  padding: 15px;
  margin-bottom: 20px;
}

@media only screen and (min-width:641px) {
  .emotion-4 {
    margin-bottom: 30px;
  }
}

<InsetTextNarrowBorder>
  <Styled(InsetText)
    isNarrow={true}
  >
    <InsetText
      className="emotion-5"
      isNarrow={true}
    >
      <Styled(div)
        className="emotion-5"
        isNarrow={true}
      >
        <div
          className="emotion-4"
        >
          <Styled(Paragraph)
            mb={0}
          >
            <Paragraph
              className="emotion-2"
              mb={0}
              supportingText={false}
            >
              <Styled(ReactMarkdown)
                allowedTypes={
                  Array [
                    "paragraph",
                    "emphasis",
                    "strong",
                    "link",
                    "inlineCode",
                    "code",
                  ]
                }
                className="emotion-2"
                escapeHtml={false}
                mb={0}
                renderers={
                  Object {
                    "link": [Function],
                  }
                }
                skipHtml={true}
                source="It can take up to 8 weeks to register a lasting power of attorney if there are no mistakes in the application."
                supportingText={false}
              >
                <ReactMarkdown
                  allowedTypes={
                    Array [
                      "paragraph",
                      "emphasis",
                      "strong",
                      "link",
                      "inlineCode",
                      "code",
                    ]
                  }
                  astPlugins={Array []}
                  className="emotion-0"
                  escapeHtml={false}
                  mb={0}
                  plugins={Array []}
                  rawSourcePos={false}
                  renderers={
                    Object {
                      "link": [Function],
                    }
                  }
                  skipHtml={true}
                  source="It can take up to 8 weeks to register a lasting power of attorney if there are no mistakes in the application."
                  sourcePos={false}
                  supportingText={false}
                  transformLinkUri={[Function]}
                >
                  <div
                    className="emotion-0"
                    key="root-1-1"
                  >
                    <p
                      key="paragraph-1-1"
                    >
                      It can take up to 8 weeks to register a lasting power of attorney if there are no mistakes in the application.
                    </p>
                  </div>
                </ReactMarkdown>
              </Styled(ReactMarkdown)>
            </Paragraph>
          </Styled(Paragraph)>
        </div>
      </Styled(div)>
    </InsetText>
  </Styled(InsetText)>
</InsetTextNarrowBorder>
`;
