// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`inset text can render with a paragraph: inset text with paragraph 1`] = `
.c2 {
  font-family: "nta",Arial,sans-serif;
  margin: 0;
  font-size: 16px;
  line-height: 1.25;
}

.c2 > p {
  margin: 0;
}

.c2 > p > code {
  padding: 0.2em 0.4em;
  margin: 0;
  font-size: 85%;
  background-color: rgba(27,31,35,0.05);
  border-radius: 3px;
}

.c2 > pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #f6f8fa;
  border-radius: 3px;
}

.c2 > pre > code {
  display: inline;
  padding: 0;
  margin: 0;
  border: 0;
  overflow: visible;
  line-height: inherit;
  word-wrap: normal;
}

.c1 {
  margin-bottom: 0;
}

.c0 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  color: #0b0c0c;
  padding: 15px;
  margin-top: 20px;
  margin-bottom: 20px;
  clear: both;
  border-left: 10px solid #bfc1c3;
}

.c0:first-child {
  margin-top: 0;
}

.c0:only-child,
.c0:last-child {
  margin-bottom: 0;
}

@media only screen and (min-width:641px) {
  .c2 {
    font-size: 19px;
    line-height: 1.3;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    margin-bottom: 0;
  }
}

@media print {
  .c0 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media print {
  .c0 {
    color: #000;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-top: 30px;
    margin-bottom: 30px;
  }
}

<InsetTextWithParagraph>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bZQynM",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
              "color: #0b0c0c; @media print {
  color: #000;
}",
              "padding: 15px;",
              [Function],
              "clear: both; border-left: 10px solid #bfc1c3; :first-child {
  margin-top: 0;
} :only-child,:last-child {
  margin-bottom: 0;
}",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "propTypes": undefined,
          "render": [Function],
          "styledComponentId": "sc-bZQynM",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <Styled(Paragraph)
          mb={0}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-EHOje",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    [Function],
                  ],
                },
                "displayName": "Styled(Paragraph)",
                "foldedComponentIds": Array [],
                "propTypes": Object {
                  "margin": [Function],
                  "mb": [Function],
                  "padding": [Function],
                },
                "render": [Function],
                "styledComponentId": "sc-EHOje",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            forwardedRef={null}
            mb={0}
          >
            <Paragraph
              className="c1"
              linkRenderer={[Function]}
              mb={0}
              supportingText={false}
            >
              <Styled(ReactMarkdown)
                allowedTypes={
                  Array [
                    "paragraph",
                    "emphasis",
                    "strong",
                    "link",
                    "inlineCode",
                    "code",
                  ]
                }
                className="c1"
                escapeHtml={false}
                linkRenderer={[Function]}
                mb={0}
                renderers={
                  Object {
                    "link": [Function],
                  }
                }
                skipHtml={true}
                source="It can take up to 8 weeks to register a lasting power of attorney if there are no mistakes in the application."
                supportingText={false}
              >
                <StyledComponent
                  allowedTypes={
                    Array [
                      "paragraph",
                      "emphasis",
                      "strong",
                      "link",
                      "inlineCode",
                      "code",
                    ]
                  }
                  className="c1"
                  escapeHtml={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "font-family: \\"nta\\", Arial, sans-serif; margin: 0; > p {
  margin: 0;
} > p > code {
  padding: 0.2em 0.4em; margin: 0; font-size: 85%; background-color: rgba(27,31,35,0.05); border-radius: 3px;
} > pre {
  padding: 16px; overflow: auto; font-size: 85%; line-height: 1.45; background-color: #f6f8fa; border-radius: 3px;
} > pre > code {
  display: inline; padding: 0; margin: 0; border: 0; overflow: visible; line-height: inherit; word-wrap: normal;
}",
                          [Function],
                        ],
                      },
                      "displayName": "Styled(ReactMarkdown)",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "renderers": Object {
                        "blockquote": "blockquote",
                        "break": "br",
                        "code": [Function],
                        "definition": [Function],
                        "delete": "del",
                        "emphasis": "em",
                        "heading": [Function],
                        "html": [Function],
                        "image": "img",
                        "imageReference": "img",
                        "inlineCode": [Function],
                        "link": "a",
                        "linkReference": "a",
                        "list": [Function],
                        "listItem": [Function],
                        "paragraph": "p",
                        "root": "div",
                        "strong": "strong",
                        "table": [Function],
                        "tableBody": [Function],
                        "tableCell": [Function],
                        "tableHead": [Function],
                        "tableRow": [Function],
                        "thematicBreak": "hr",
                        "virtualHtml": [Function],
                      },
                      "styledComponentId": "sc-ifAKCX",
                      "target": [Function],
                      "toString": [Function],
                      "types": Array [
                        "root",
                        "break",
                        "paragraph",
                        "emphasis",
                        "strong",
                        "thematicBreak",
                        "blockquote",
                        "delete",
                        "link",
                        "image",
                        "linkReference",
                        "imageReference",
                        "table",
                        "tableHead",
                        "tableBody",
                        "tableRow",
                        "tableCell",
                        "list",
                        "listItem",
                        "definition",
                        "heading",
                        "inlineCode",
                        "code",
                        "html",
                        "virtualHtml",
                      ],
                      "uriTransformer": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  forwardedRef={null}
                  linkRenderer={[Function]}
                  mb={0}
                  renderers={
                    Object {
                      "link": [Function],
                    }
                  }
                  skipHtml={true}
                  source="It can take up to 8 weeks to register a lasting power of attorney if there are no mistakes in the application."
                  supportingText={false}
                >
                  <ReactMarkdown
                    allowedTypes={
                      Array [
                        "paragraph",
                        "emphasis",
                        "strong",
                        "link",
                        "inlineCode",
                        "code",
                      ]
                    }
                    astPlugins={Array []}
                    className="c1 c2"
                    escapeHtml={false}
                    linkRenderer={[Function]}
                    mb={0}
                    plugins={Array []}
                    rawSourcePos={false}
                    renderers={
                      Object {
                        "link": [Function],
                      }
                    }
                    skipHtml={true}
                    source="It can take up to 8 weeks to register a lasting power of attorney if there are no mistakes in the application."
                    sourcePos={false}
                    supportingText={false}
                    transformLinkUri={[Function]}
                  >
                    <div
                      className="c1 c2"
                      key="root-1-1"
                    >
                      <p
                        key="paragraph-1-1"
                      >
                        It can take up to 8 weeks to register a lasting power of attorney if there are no mistakes in the application.
                      </p>
                    </div>
                  </ReactMarkdown>
                </StyledComponent>
              </Styled(ReactMarkdown)>
            </Paragraph>
          </StyledComponent>
        </Styled(Paragraph)>
      </div>
    </StyledComponent>
  </styled.div>
</InsetTextWithParagraph>
`;

exports[`inset text matches the InsetText snapshot: inset text 1`] = `
.c0 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  color: #0b0c0c;
  padding: 15px;
  margin-top: 20px;
  margin-bottom: 20px;
  clear: both;
  border-left: 10px solid #bfc1c3;
}

.c0:first-child {
  margin-top: 0;
}

.c0:only-child,
.c0:last-child {
  margin-bottom: 0;
}

@media print {
  .c0 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media print {
  .c0 {
    color: #000;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-top: 30px;
    margin-bottom: 30px;
  }
}

<_default>
  <DocumentedInsetText>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bZQynM",
              "isStatic": false,
              "lastClassName": "c0",
              "rules": Array [
                "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                "color: #0b0c0c; @media print {
  color: #000;
}",
                "padding: 15px;",
                [Function],
                "clear: both; border-left: 10px solid #bfc1c3; :first-child {
  margin-top: 0;
} :only-child,:last-child {
  margin-bottom: 0;
}",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "propTypes": undefined,
            "render": [Function],
            "styledComponentId": "sc-bZQynM",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="c0"
        >
          It can take up to 8 weeks to register a lasting power of attorney if there are no mistakes in the application.
        </div>
      </StyledComponent>
    </styled.div>
  </DocumentedInsetText>
</_default>
`;
